swagger: "2.0"
info:
  description: "balloon API"
  version: "1.0.0"
  title: "balloon API"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
basePath: "/"
schemes:
- "https"
paths:
  /api:
    get:
      tags:
        - core.v2
      summary: 'Get server status'
      operationId: getApi
      produces:
        - application/json
      responses:
        200:
          description: "API root"
          schema:
            $ref: '#/definitions/core.v2.ApiRoot'
  /api/v2:
    get:
      tags:
        - core.v2
      summary: 'Get server status'
      operationId: getV2
      produces:
        - application/json
      responses:
        200:
          description: "API root"
          schema:
            $ref: '#/definitions/core.v2.ApiRoot'
  /api/v2/tokens:
    post:
      tags:
        - core.v2
      summary: OAUTH2/OIDC token endpoint
      operationId: createToken
      responses:
        "200":
          description: Oauth2 token
          schema:
            $ref: "#/definitions/core.v2.OAuth2Token"
  '/api/v2/groups':
    get:
      tags:
        - core.v2
      summary: Get groups
      description: A group is a colletion of users
      operationId: getGroups
      produces:
      - "application/json"
      parameters:
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          type: array
          items:
            type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          type: string
      responses:
        403:
          description: "Access denied"
        200:
          description: "List of groups"
          schema:
            $ref: "#/definitions/core.v2.Groups"
    post:
      tags:
        - core.v2
      summary: Add new group
      operationId: addGroup
      produces:
      - "application/json"
      parameters:
      - in: body
        name: data
        schema:
          $ref: "#/definitions/core.v2.Group"
      responses:
        201:
          description: "If successful the server will respond with 201 Created"
          schema:
            $ref: "#/definitions/core.v2.Group"
        403:
          description: "Access denied"
  '/api/v2/groups/{group}':
    get:
      tags:
        - core.v2
      operationId: getGroup
      summary: 'Get single group'
      produces:
        - application/json
      parameters:
        - name: group
          in: path
          required: true
          type: string
          description: 'Resource identifier'
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          type: array
          items:
            type: string
      responses:
        200:
          description: "Group"
          schema:
            $ref: "#/definitions/core.v2.Group"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
    patch:
      tags:
        - core.v2
      summary: 'Set attributes for group'
      operationId: patchGroup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: group
          in: path
          required: true
          type: string
          description: 'Resource identifier'
        - in: body
          name: body
          description: 'Set attributes for group'
          required: true
          schema:
            $ref: "#/definitions/core.v2.Group"
      responses:
        200:
          description: "Group"
          schema:
            $ref: "#/definitions/core.v2.Group"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
    delete:
      tags:
        - core.v2
      summary: 'Delete group'
      operationId: deleteGroup
      produces:
        - application/json
      parameters:
        - name: group
          in: path
          required: true
          type: string
          description: 'Resource identifier'
        - name: force
          in: query
          required: false
          type: boolean
          description: 'Per default the group gets disabled, if force is set the group gets removed completely.'
      responses:
        204:
          description: "If successful the server will respond with 204 No Content"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/groups/{group}/members':
    get:
      tags:
        - core.v2
      summary: 'Request all member of a group'
      operationId: getGroupMembers
      produces:
        - application/json
      parameters:
        - name: group
          in: path
          required: true
          type: string
          description: 'Resource identifier'
      responses:
        200:
          description: List of users
          schema:
            type: array
            items:
              $ref: '#/definitions/core.v2.User'
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/groups/{group}/undelete':
    post:
      tags:
        - core.v2
      summary: 'Restore deleted group'
      operationId: undeleteGroup
      produces:
        - application/json
      parameters:
        - name: group
          in: path
          required: true
          type: 'string'
          description: 'Resource identifier'
      responses:
        200:
          description: "Group"
          schema:
            $ref: "#/definitions/core.v2.Group"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/users':
    get:
      tags:
        - core.v2
      summary: Get users
      description: A user is a colletion of users
      operationId: getUsers
      produces:
      - "application/json"
      parameters:
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          type: array
          items:
            type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          type: string
      responses:
        '200':
          description: List of users
          schema:
            type: array
            items:
              $ref: '#/definitions/core.v2.Users'
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
    post:
      tags:
        - core.v2
      summary: Add new user
      operationId: addUser
      produces:
      - "application/json"
      parameters:
      - in: body
        name: data
        schema:
          $ref: "#/definitions/core.v2.User"
      responses:
        201:
          description: "If successful the server will respond with 201 Created"
          schema:
            $ref: "#/definitions/core.v2.User"
        403:
          description: "Access denied"
  '/api/v2/users/{user}':
    get:
      tags:
        - core.v2
      operationId: getUser
      summary: 'Get single user'
      produces:
        - application/json
      parameters:
        - name: user
          in: path
          required: true
          type: string
          description: 'Resource identifier'
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          type: array
          items:
            type: string
      responses:
        200:
          description: "User"
          schema:
            $ref: "#/definitions/core.v2.User"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
    patch:
      tags:
        - core.v2
      summary: 'Set attributes for user'
      operationId: patchUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user
          in: path
          required: true
          type: string
          description: 'Resource identifier'
        - in: body
          name: body
          description: 'Set attributes for user'
          required: true
          schema:
            $ref: "#/definitions/core.v2.User"
      responses:
        200:
          description: "User"
          schema:
            $ref: "#/definitions/core.v2.User"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
    delete:
      tags:
        - core.v2
      summary: 'Delete user'
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: user
          in: path
          required: true
          type: string
          description: 'Resource identifier'
        - name: force
          in: query
          required: false
          type: boolean
          description: 'Per default the user gets disabled, if force is set the user gets removed completely.'
      responses:
        204:
          description: "If successful the server will respond with 204 No Content"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/users/{user}/node-attribute-summary':
    get:
      tags:
        - core.v2
      summary: 'Get summary of node usage.'
      operationId: getNodeAttributeSummary
      produces:
        - application/json
      parameters:
        - name: user
          in: path
          required: true
          type: 'string'
          description: 'Resource identifier'
      responses:
        200:
          description: "User"
          schema:
            $ref: "#/definitions/core.v2.UserNodeAttributeSummary"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/users/{user}/groups':
    get:
      tags:
        - core.v2
      summary: 'Request all groups of a user'
      operationId: getUserGroups
      produces:
        - application/json
      parameters:
        - name: user
          in: path
          required: true
          type: string
          description: 'Resource identifier'
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          type: array
          items:
            type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          type: string
      responses:
        200:
          description: "Groups"
          schema:
            $ref: "#/definitions/core.v2.Groups"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/users/{user}/undelete':
    post:
      tags:
        - core.v2
      summary: 'Restore deleted user'
      operationId: undeleteUser
      produces:
        - application/json
      parameters:
        - name: user
          in: path
          required: true
          type: string
          description: 'Resource identifier'
      responses:
        200:
          description: "User"
          schema:
            $ref: "#/definitions/core.v2.User"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  /api/v2/users/whoami:
    get:
      tags:
        - core.v2
      summary: 'Get user object of the current authenticated user'
      operationId: getCurrentUser
      produces:
        - application/json
      parameters:
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          type: array
          items:
            type: string
      responses:
        200:
          description: "User"
          schema:
            $ref: "#/definitions/core.v2.User"
  '/api/v2/users/{user}/avatar':
    get:
      tags:
        - core.v2
      summary: 'Get user avatar'
      operationId: getUserAvatar
      produces:
        - octet/stream
      parameters:
        - name: user
          in: path
          required: true
          type: string
          description: 'Resource identifier'
      responses:
        200:
          description: "Binaray user avatar"
          schema:
            $ref: "#/definitions/core.v2.User"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  /api/v2/nodes/trash:
    get:
      tags:
        - core.v2
      summary: 'Return delete nodes (Excluding sub nodes of deleted collections)'
      operationId: getDeletedNodes
      produces:
        - application/json
      parameters:
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          type: array
          items:
            type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          type: string
      responses:
        200:
         description: Nodes
         schema:
           $ref: '#/definitions/core.v2.Nodes'
  /api/v2/nodes/search:
    get:
      tags:
        - ballon.app.elasticsearch.v2
      summary: 'Extended search query using elasticsearch'
      operationId: queryElasticsearch
      produces:
        - application/json
      parameters:
        - name: query
          in: query
          required: true
          type: string
          description: 'Elasticsearch query as JSON'
        - name: deleted
          in: query
          required: false
          type: number
          description: 'Wherever include deleted nodes or not, possible values:  0 Exclude deleted 1 Only deleted 2 Include deleted.'
      responses:
        200:
         description: Nodes
         schema:
           $ref: '#/definitions/core.v2.Nodes'
  /api/v2/notifications:
    get:
      tags:
        - notification.v2
      summary: 'Get my nofitifications'
      operationId: getMyNotifications
      produces:
        - application/json
      parameters:
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          type: array
          items:
            type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          type: string
      responses:
        200:
          description: "List of notifications"
          schema:
            $ref: "#/definitions/notification.v2.Notifications"
    post:
      tags:
        - notification.v2
      summary: 'Send notification'
      operationId: postNotification
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/notification.v2.Notification'
      responses:
        202:
          description: "Notification"
          schema:
            $ref: "#/definitions/notification.v2.Notification"
  /api/v2/notifications/{notification}:
    get:
      tags:
        - notification.v2
      summary: 'Get a single notification'
      operationId: getNotification
      produces:
        - application/json
      parameters:
        - name: notification
          in: path
          required: true
          type: string
          description: 'Resource identifier'
      responses:
        200:
          description: "Notification"
          schema:
            $ref: "#/definitions/notification.v2.Notification"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
    delete:
      tags:
        - notification.v2
      summary: 'Delete a notification'
      operationId: deleteNotification
      produces:
        - application/json
      parameters:
        - name: notification
          in: path
          required: true
          type: string
          description: 'Resource identifier'
      responses:
        204:
          description: "If successful the server will respond with 204 No Content"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  /api/v2/notifications/broadcast:
    post:
      tags:
        - notification.v2
      summary: 'Send notification to all users'
      operationId: sendBroadcast
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: 'Notification'
          schema:
            $ref: "#/definitions/notification.v2.Notification"
      responses:
        202:
          description: "Notification"
          schema:
            $ref: "#/definitions/notification.v2.Notification"
        403:
          description: "Access denied"
  /api/v2/notifications/mail:
    post:
      tags:
        - notification.v2
      summary: 'Send mail'
      operationId: sendMail
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: 'Mail'
          schema:
            $ref: "#/definitions/notification.v2.Mail"
      responses:
        202:
          description: "Mail"
        403:
          description: "Access denied"
  /api/v2/nodes/{node}/subscription:
    post:
      tags:
        - notification.v2
      summary: 'Receive node updates'
      operationId: subscribeNode
      produces:
        - application/json
      parameters:
        - name: node
          in: path
          required: true
          type: 'string'
          description: 'Node identifier'
        - name: subscribe
          in: query
          required: false
          type: boolean
          description: 'If true the subscription is active'
        - name: exclude_me
          in: query
          required: false
          type: boolean
          description: 'Exclude subscription owner (me) from change notifications'
        - name: recursive
          in: query
          required: false
          type: boolean
          description: 'Apply subscription to children (inclusive newly added children)'
      responses:
        202:
          description: "Node"
          schema:
            $ref: "#/definitions/core.v2.Node"
        403:
          description: "Access denied"
        404:
          description: "Resource does not exists"
  '/api/v2/files/{file}/convert/slaves':
    get:
      tags:
        - convert.v2
      summary: 'Get existing convert slaves'
      operationId: getSlaves
      produces:
        - application/json
      parameters:
        - name: file
          in: path
          required: true
          type: string
          description: 'File identifier'
      responses:
        200:
          description: "Slaves"
          schema:
            $ref: "#/definitions/convert.v2.Slaves"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
    post:
      tags:
        - convert.v2
      summary: 'Add new convert slave'
      operationId: addSlave
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: file
          in: path
          required: true
          type: string
          description: 'File identifier'
        - in: body
          name: body
          description: 'Add new conversion slave '
          required: true
          schema:
            $ref: '#/definitions/convert.v2.Slave'
      responses:
        202:
          description: "Slave"
          schema:
            $ref: "#/definitions/convert.v2.Slave"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/files/{file}/convert/slaves/{slave}':
    get:
      tags:
        - convert.v2
      summary: 'Get single slave'
      operationId: getSlave
      produces:
        - application/json
      parameters:
        - name: file
          in: path
          required: true
          type: string
          description: 'File identifier'
        - name: slave
          in: path
          required: true
          type: string
          description: 'Slave identifier'
      responses:
        200:
          description: "Slave"
          schema:
            $ref: "#/definitions/convert.v2.Slave"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
    delete:
      tags:
        - convert.v2
      summary: 'Delete slave'
      operationId: deleteSlave
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: file
          in: path
          required: true
          type: string
          description: 'File identifier'
        - name: slave
          in: path
          required: true
          type: string
          description: 'Slave identifier'
      responses:
        204:
          description: "If successful the server will respond with 204 No Content"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/files/{file}/convert/supported-formats':
    get:
      tags:
        - convert.v2
      summary: 'Get supported file formats to convert to (formats do vary between files)'
      operationId: getSupportedFormats
      produces:
        - application/json
      parameters:
        - name: file
          in: path
          required: true
          type: string
          description: 'File identifier'
      responses:
        200:
          description: "Formats"
          schema:
            type: array
            items:
              type: 'string'
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/desktop-clients/{format}/content':
    get:
      tags:
        - desktopclient.v2
      summary: 'Download balloon desktop client'
      operationId: getDesktopClient
      produces:
        - octet/stream
      parameters:
        - name: format
          in: path
          required: true
          type: string
          description: 'Request client foramt (deb, rpm, exe, pkg, zip or a custom format)'
          enum:
          - deb
          - rpm
          - exe
          - pkg
          - zip
      responses:
        200:
          description: "Desktop client (binary)"
          schema:
            type: file
  /api/v2/office/wopi/document/{document}:
    get:
      tags:
        - wopi.v2
      summary: 'Get document session information including document owner, session user and document size'
      operationId: getWopiDocument
      produces:
        - application/json
      parameters:
        - name: document
          in: path
          required: true
          type: string
          description: 'The document id'
        - name: access_token
          in: query
          required: true
          type: string
          description: 'An access token to access the document'
      responses:
        200:
          description: "WOPI document information"
          schema:
            $ref: "#/definitions/office.v2.WopiDocument"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  /api/v2/office/wopi/document/{document}/contents:
    get:
      tags:
        - wopi.v2
      summary: 'Get document contents'
      operationId: getWopiDocumentContent
      parameters:
        - name: document
          in: path
          required: true
          type: string
          description: 'The document id '
        - name: access_token
          in: query
          required: true
          type: string
          description: 'An access token to access the document'
      responses:
        200:
          description: "Contents"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
    post:
      tags:
        - wopi.v2
      summary: 'Save document contents'
      operationId: updateWopiDocuemntContent
      parameters:
        - name: document
          in: path
          required: true
          type: string
          description: 'The document id '
        - name: access_token
          in: query
          required: true
          type: string
          description: 'An access token to access the document'
        - in: body
          name: body
          description: 'Document content'
          schema:
            type: string
      responses:
        200:
          description: "Operation was successful"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  /api/v2/office/documents:
    post:
      tags:
        - wopi.v2
      description: 'Create new document from an existing office document template'
      operationId: createDocument
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/core.v2.File'
      responses:
        201:
          description: "File"
          schema:
            $ref: "#/definitions/core.v2.File"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/nodes/{node}/clone':
    post:
      tags:
        - core.v2
      summary: Clone existing node
      operationId: cloneNode
      produces:
        - application/json
      parameters:
        - name: node
          in: path
          required: true
          description: 'Node identifier'
          type: string
        - name: destid
          in: query
          required: false
          description: 'Destination collection, if this is null root is taken'
          type: string
        - name: conflict
          in: query
          required: false
          description: 'Conflict resolution'
          type: number
          default: 0
          enum:
          - 0
          - 1
          - 2
      responses:
        201:
          description: "Node"
          schema:
            $ref: "#/definitions/core.v2.Node"
        207:
          description: "Multi status if batch request"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/nodes/{node}/move':
    post:
      tags:
        - core.v2
      summary: 'Move node (Change parent collection), single or multiple ones'
      operationId: moveNode
      produces:
        - application/json
      parameters:
        - name: node
          in: path
          required: true
          description: 'Node identifier'
          type: string
        - name: destid
          in: query
          required: false
          description: 'Destination collection, if this is null root is taken'
          type: string
        - name: conflict
          in: query
          required: false
          description: 'Conflict resolution'
          type: number
          default: 0
          enum:
          - 0
          - 1
          - 2
      responses:
        200:
          description: "Node"
          schema:
            $ref: "#/definitions/core.v2.Node"
        207:
          description: "Multi status if batch request"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/nodes/{node}/undelete':
    post:
      tags:
        - core.v2
      summary: 'Undelete (Restore from trash) a single node or multiple ones.'
      operationId: undeleteNode
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: node
          in: path
          required: true
          description: 'Node identifier'
          type: string
        - name: move
          in: query
          required: false
          description: 'If node should also be moved during undelete'
          type: boolean
          default: false
        - name: destid
          in: query
          required: false
          description: 'If node should also be moved during undelete'
          type: string
        - name: conflict
          in: query
          required: false
          description: 'Conflict resolution'
          type: number
          default: 0
          enum:
          - 0
          - 1
          - 2
      responses:
        200:
          description: "Node"
          schema:
            $ref: "#/definitions/core.v2.Node"
        207:
          description: "Multi status if batch request"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/collections/{collection}/share':
    get:
      tags:
        - core.v2
      summary: 'Get share acl and share name'
      operationId: getShare
      produces:
        - application/json
      parameters:
        - name: collection
          in: path
          required: true
          description: 'Collection identifier'
          type: string
      responses:
        200:
          description: "Share"
          schema:
            $ref: "#/definitions/core.v2.Share"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
    post:
      tags:
        - core.v2
      summary: 'Create a new share from an existing collection'
      operationId: shareCollection
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: collection
          in: path
          required: true
          description: 'Collection identifier'
          type: string
        - in: body
          name: body
          description: 'Create a new share from an existing collection '
          required: true
          schema:
            $ref: '#/definitions/core.v2.Share'
      responses:
        200:
          description: "Collection"
          schema:
            $ref: "#/definitions/core.v2.Collection"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
    delete:
      tags:
        - core.v2
      summary: 'Does only remove sharing options and transform a share back into a normal collection. There will not be any data loss after this action. All existing references would be removed automatically.'
      operationId: deleteShare
      parameters:
        - name: collection
          in: path
          required: true
          description: 'Collection identifier'
          type: string
      responses:
        204:
          description: "The server responds with 204 if successful."
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/collections/{collection}/children':
    get:
      tags:
        - core.v2
      summary: 'Get all children of a collection'
      operationId: getChildren
      produces:
        - application/json
      parameters:
        - name: collection
          in: path
          required: true
          description: 'Parent collection'
          type: string
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          type: string
        - in: query
          name: deleted
          description: Wheter to include deleted or not
          required: false
          type: number
          enum:
          - 0
          - 1
          - 2
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          type: array
          items:
            type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          type: string
        - in: query
          name: recursive
          description: 'Include children recursively.'
          required: false
          type: boolean
          default: false
      responses:
        200:
          description: "List of children"
          schema:
            $ref: "#/definitions/core.v2.Nodes"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/collections/children':
    get:
      tags:
        - core.v2
      summary: 'Get all children of the root collection'
      operationId: getRootChildren
      produces:
        - application/json
      parameters:
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          type: string
        - in: query
          name: deleted
          description: Wheter to include deleted or not
          required: false
          type: number
          enum:
          - 0
          - 1
          - 2
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          type: array
          items:
            type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          type: string
        - in: query
          name: recursive
          description: 'Include children recursively.'
          required: false
          type: boolean
          default: false
      responses:
        200:
          description: "List of children"
          schema:
            $ref: "#/definitions/core.v2.Nodes"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/collections':
    get:
      tags:
        - core.v2
      summary: 'Get all collections'
      operationId: getCollections
      produces:
        - application/json
      parameters:
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          type: string
        - in: query
          name: deleted
          description: Wheter to include deleted or not
          required: false
          type: number
          enum:
          - 0
          - 1
          - 2
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          type: array
          items:
            type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          type: string
      responses:
        200:
          description: "List of collections"
          schema:
            $ref: "#/definitions/core.v2.Collections"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
    post:
      tags:
        - core.v2
      summary: 'Create a new collection in root'
      operationId: createRootCollection
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/core.v2.Collection'
      responses:
        201:
          description: "Collection"
          schema:
            $ref: "#/definitions/core.v2.Collection"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/collections/{collection}':
    post:
      tags:
        - core.v2
      summary: 'Create a new collection'
      operationId: createCollection
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: collection
          in: path
          required: true
          description: 'Parent collection'
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/core.v2.Collection'
      responses:
        201:
          description: "Collection"
          schema:
            $ref: "#/definitions/core.v2.Collection"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/files':
    get:
      tags:
        - core.v2
      summary: 'Get all files'
      operationId: getFiles
      produces:
        - application/json
      parameters:
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          type: string
        - in: query
          name: deleted
          description: Wheter to include deleted or not
          required: false
          type: number
          enum:
          - 0
          - 1
          - 2
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          type: array
          items:
            type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          type: string
      responses:
        200:
          description: "List of files"
          schema:
            $ref: "#/definitions/core.v2.Files"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
    put:
      tags:
        - core.v2
      summary: 'Upload an entire file in one-shot. Use this endpoint only for small files, for bigger files use the chunking endpoint.'
      operationId: uploadFile
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: File content
          schema:
            type: string
      responses:
        201:
          description: "File created"
          schema:
            $ref: "#/definitions/core.v2.File"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/files/{file}/history':
    get:
      tags:
        - core.v2
      summary: 'Get a full change history of a file'
      operationId: getFileHistory
      produces:
        - application/json
      parameters:
        - name: file
          in: path
          required: true
          type: string
          description: 'File identifier'
      responses:
        200:
          description: "File history"
          schema:
            $ref: "#/definitions/core.v2.FileHistory"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/files/{file}/restore':
    post:
      tags:
        - core.v2
      summary: 'Rollback to a recent version from history. Use the version number from history.'
      operationId: rollbackFile
      produces:
        - application/json
      parameters:
        - name: file
          in: path
          required: true
          type: string
          description: 'File identifier'
      responses:
        200:
          description: "File"
          schema:
            $ref: "#/definitions/core.v2.File"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  /api/v2/files/chunk:
    put:
      tags:
        - core.v2
      summary: 'Upload a file chunk. You have to manually splitt the binary data into multiple chunks and upload them successively! using this method. Once uploading the last chunk, the server will automatically create or update the file node. You may set the parent collection, name and or custom attributes only with the last request to save traffic.'
      operationId: uploadChunk
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: 'File content'
          required: true
          schema:
            type: string
      responses:
        200:
          description: "File updated"
          schema:
            $ref: "#/definitions/core.v2.File"
        201:
          description: "File newly created"
          schema:
            $ref: "#/definitions/core.v2.File"
        206:
          description: "Chunk uploaded"
          schema:
            $ref: "#/definitions/core.v2.ChunkSession"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/nodes':
    get:
      tags:
        - core.v2
      summary: 'Get all nodes'
      operationId: getNodes
      produces:
        - application/json
      parameters:
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          type: string
        - in: query
          name: deleted
          description: Wheter to include deleted or not
          required: false
          type: number
          enum:
          - 0
          - 1
          - 2
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          type: array
          items:
            type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          type: string
      responses:
        200:
          description: "List of nodes"
          schema:
            $ref: "#/definitions/core.v2.Nodes"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/nodes/{node}':
    delete:
      tags:
        - core.v2
      summary: 'Delete node'
      operationId: deleteNode
      parameters:
        - name: node
          in: path
          required: true
          type: string
          description: 'Node identifier'
        - name: force
          in: query
          required: false
          type: boolean
          description: 'Force flag need to be set to delete a node from trash (node must have the deleted flag) '
        - name: ignore_flag
          in: query
          required: false
          type: boolean
          description: 'If both ignore_flag and force_flag were set, the node will be deleted completely '
        - name: at
          in: query
          required: false
          type: number
          description: 'Has to be a valid unix timestamp if so the node will destroy itself at this specified time instead immediatly'
      responses:
        204:
          description: "If successful the server will respond with 204 No Content"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
    get:
      tags:
        - core.v2
      summary: 'Get single node'
      operationId: getNode
      produces:
        - application/json
      parameters:
        - name: node
          in: path
          required: true
          type: string
          description: 'Node identifier'
        - name: attributes
          in: query
          required: false
          type: 'array'
          description: 'Filter attributes'
          items:
            type: string
      responses:
        200:
          description: "Node"
          schema:
            $ref: "#/definitions/core.v2.Node"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
    patch:
      tags:
        - core.v2
      summary: 'Change attributes'
      operationId: updateNode
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: node
          in: path
          required: true
          type: string
          description: 'Node identifier'
        - in: body
          name: body
          description: 'Change attributes '
          required: true
          schema:
            $ref: '#/definitions/core.v2.Node'
      responses:
        200:
          description: "Node"
          schema:
            $ref: "#/definitions/core.v2.Node"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/nodes/{node}/share-link':
    delete:
      tags:
        - sharelink.v2
      summary: 'Delete an existing sharing link'
      operationId: deleteLink
      produces:
        - application/json
      parameters:
        - name: node
          in: path
          required: true
          type: string
          description: 'Node identifier'
      responses:
        204:
          description: "The server responds with 204 if operation was successful"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
    post:
      tags:
        - sharelink.v2
      summary: 'Create a unique sharing link of a node (global accessible): a possible existing link will be deleted if this method will be called.'
      operationId: createLink
      produces:
        - application/json
      parameters:
        - name: node
          in: path
          required: true
          type: string
          description: 'Node identifier'
        - name: expiration
          in: query
          required: false
          type: number
          description: 'Expire timestamp as unix timestap. Tells the server when the public link should expire automatically. The default is to never expire.'
          default: 0
        - name: password
          in: query
          required: false
          type: string
          description: 'Optionally set a password to protect the public link.'
      responses:
        201:
          description: "Node"
          schema:
            $ref: "#/definitions/core.v2.Node"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  /api/v2/nodes/last-cursor:
    get:
      tags:
        - core.v2
      summary: 'Use this method to request the latest cursor if you only need to now if there are changes on the server. This method will not return any other data than the newest cursor. To request a feed with all deltas request /delta.'
      operationId: getLastCursor
      produces:
        - application/json
      responses:
        200:
          description: "Cursor"
          schema:
            type: string
  '/api/v2/nodes/{node}/content':
    get:
      tags:
        - core.v2
      summary: 'Download node contents. Note that collections are zipped on-the-fly.'
      operationId: getContent
      produces:
        - octet/stream
      parameters:
        - name: node
          in: path
          required: true
          type: string
          description: 'Node identifier'
        - name: Byte-Ranges
          in: header
          required: false
          type: number
          description: 'Read stream from a specific offset/limit in bytes '
        - name: encode
          in: query
          required: false
          type: string
          description: 'Can be set to base64 to encode content as base64.'
          enum:
          - base64
        - name: download
          in: query
          required: false
          type: boolean
          description: 'Force download file (Content-Disposition: attachment HTTP header)'
          default: false
      responses:
        200:
          description: "Content"
          schema:
            type: file
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  /api/v2/nodes/delta:
    get:
      tags:
        - core.v2
      summary: 'Delta stream with cursor support.'
      operationId: getDelta
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          required: false
          type: number
          description: 'Limit the number of delta entries, if too low you have to call this endpoint more often since has_more would be true more often '
        - name: attributes
          in: query
          required: false
          type: 'array'
          description: 'Filter attributes, per default not all attributes would be returned'
          items:
            type: string
        - name: cursor
          in: query
          required: false
          type: string
          description: 'Set a cursor to rquest next nodes within delta processing '
      responses:
        200:
          description: "Delta"
          schema:
            $ref: "#/definitions/core.v2.Delta"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/nodes/event-log':
    get:
      tags:
        - core.v2
      summary: 'Get event log containing all operations which are made by the user himself or share members'
      operationId: getEventLog
      produces:
        - application/json
      parameters:
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          type: array
          items:
            type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          type: string
      responses:
        200:
          description: "Event log"
          schema:
            $ref: "#/definitions/core.v2.EventLogs"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/nodes/{node}/event-log':
    get:
      tags:
        - core.v2
      summary: 'Get event log containing all operations which are made by the user himself or share members on a given node'
      operationId: getNodeEventLog
      produces:
        - application/json
      parameters:
        - name: node
          in: path
          required: true
          description: 'Node identifier'
          type: string
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          type: array
          items:
            type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          type: string
      responses:
        200:
          description: "Event log"
          schema:
            $ref: "#/definitions/core.v2.EventLogs"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/nodes/{node}/parents':
    get:
      tags:
        - core.v2
      summary: 'The hirarchy of all parent nodes is ordered in a single level array beginning with the collection on the highest level.'
      operationId: getParentNodes
      produces:
        - application/json
      parameters:
        - name: node
          in: path
          required: true
          description: 'Node identifier'
          type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          type: array
          items:
            type: string
        - name: self
          in: query
          required: false
          type: boolean
          description: 'Include requested collection itself at the end of the list (Will be ignored if the requested node is a file)'
      responses:
        200:
          description: "Parent nodes"
          schema:
            $ref: "#/definitions/core.v2.Nodes"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
  '/api/v2/files/{file}/preview':
    get:
      tags:
        - preview.v2
      summary: 'Get a preview of the files content. The body either contains an encoded string or a jpeg binary.'
      operationId: getPreview
      produces:
        - octet/stream
      parameters:
        - name: file
          in: path
          required: true
          type: string
          description: 'File identifier'
        - name: encode
          in: query
          required: false
          type: string
          description: 'Set to base64 to return a jpeg encoded preview as base64, else return it as jpeg binary'
      responses:
        200:
          description: "Binara data"
        404:
          description: "Resource does not exists"
        403:
          description: "Access denied"
definitions:
  core.v2.JsonPatch:
    description: "A JSON Patch according rfc6902."
    type: "object"
    properties:
      op:
        type: "string"
      path:
        type: "string"
      value:
        type: "string"
  core.v2.ApiRoot:
    description: "Describes the api root."
    type: "object"
    properties:
      name:
        type: string
      api:
        type: number
  core.v2.Links:
    description: "Contains resource links (URL) to other resources."
    type: "object"
    properties:
      self:
        $ref: "#/definitions/core.v2.Link"
  core.v2.ListLinks:
    type: "object"
    properties:
      self:
        $ref: "#/definitions/core.v2.Link"
      prev:
        $ref: "#/definitions/core.v2.Link"
      next:
        $ref: "#/definitions/core.v2.Link"
  core.v2.Link:
    type: "object"
    properties:
      href:
        type: "string"
  core.v2.ResourceList:
    type: "object"
    properties:
      _links:
        description: "Holds a list of links rfc1738 to other resources."
        $ref: "#/definitions/core.v2.ListLinks"
      kind:
        description: "The resource type, always List."
        type: "string"
        default: "List"
      count:
        description: "Holds the number of items in the current list response."
        type: "number"
      total:
        description: "Holds the number of total available items on the server. Note that a List resource is always paged. You need to traverse with offset and limit to request further resources in the list."
        type: "number"
  core.v2.Resource:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/core.v2.Links"
      id:
        description: "Unique 12-byte resource identifier. Note this is a MongoDB ObjectId. The name is the standard resource identifier, the id only useful to verify that a given resource was completely recreated. An ID is immutable and will be created on the server."
        type: "string"
      created:
        description: "ISO 8601 timestamp when the resource was created."
        type: "string"
        format: date-time
  core.v2.OAuth2Token:
    description: "OAUTH2 access token response according RFC6749 https://tools.ietf.org/html/rfc6749#section-4.3.3"
    type: object
    properties:
      access_token:
        description: Resource access_token.
        type: string
      expires_in:
        description: The number of seconds the issues acceess_token is valid for. This is usually 1hour.
        type: number
        default: 3600
      token_type:
        description: The type of token. This is usually a Bearer token.
        type: string
        default: Bearer
      scope:
        description: The scopes.
        type: string
      refresh_token:
        description: An optional refresh token to get new access_tokens via the refresh_token grant type.
        type: string
  core.v2.Users:
    description: "A list of users."
    allOf:
      - $ref: '#/definitions/core.v2.ResourceList'
      - type: object
        properties:
          data:
            type: "array"
            items:
              $ref: "#/definitions/core.v2.User"
  core.v2.User:
    description: "A user is used to access the server."
    allOf:
      - $ref: '#/definitions/core.v2.Resource'
      - type: object
        properties:
          changed:
            description: "ISO 8601 timestamp when the resource was changed."
            type: "string"
            format: date-time
          username:
            description: "Unique username."
            type: "string"
          name:
            description: "Display name (Usuallly same as username)."
            type: "string"
          admin:
            description: "Admin user flag."
            type: "boolean"
            default: false
          namespace:
            description: "User namespace."
            type: "string"
          locale:
            description: "User locale."
            type: "string"
            default: "en_US"
          auth:
            description: "Authentication source."
            type: "string"
            default: "internal"
            enum:
            - internal
            - external
          has_password:
            description: "Is true if the user has a local password set."
            type: boolean
            default: false
          hard_quota:
            description: "Hard quota in bytes (Max. limit of storage usage). Note that external storage is not part of the quota. The default is no limit."
            type: "number"
            default: -1
          soft_quota:
            description: "Soft quota in bytes (Warning of high quota usage). The default is no limit."
            type: "number"
            default: -1
          available:
            description: "Available storage in bytes. Is -1 if there is no hard_quota."
            type: "number"
            default: -1
          used:
            description: "Used storage in bytes."
            type: "number"
            default: 0
  core.v2.Groups:
    description: "A list of groups."
    allOf:
      - $ref: '#/definitions/core.v2.ResourceList'
      - type: object
        properties:
          data:
            type: "array"
            items:
              $ref: "#/definitions/core.v2.Group"
  core.v2.Group:
    description: "A group contains user resources."
    allOf:
      - $ref: '#/definitions/core.v2.Resource'
      - type: object
        properties:
          changed:
            description: "ISO 8601 timestamp when the resource was changed."
            type: "string"
            format: date-time
          name:
            description: "Group name."
            type: "string"
          namespace:
            description: "User namespace."
            type: "string"
          member:
            description: "Array of user id's."
            type: "array"
            items:
              type: string
  core.v2.Nodes:
    description: "A list of nodes."
    allOf:
      - $ref: '#/definitions/core.v2.ResourceList'
      - type: object
        properties:
          data:
            type: "array"
            items:
              $ref: "#/definitions/core.v2.Node"
  core.v2.NodeMeta:
    description: "Node meta data."
    type: object
    properties:
      tags:
        description: "Node tags. Tags can be freely choosen."
        type: "array"
        items:
          type: string
      author:
        description: "Author."
        type: "string"
      license:
        description: "Content license."
        type: "string"
      color:
        description: "A color tag."
        type: "string"
  core.v2.Node:
    description: "A Node."
    allOf:
      - $ref: '#/definitions/core.v2.Resource'
      - type: object
        properties:
          changed:
            description: "ISO 8601 timestamp when the resource was changed."
            type: "string"
            format: date-time
          deleted:
            description: "ISO 8601 timestamp when the resource was deleted."
            type: string
            format: date-time
          name:
            description: "Node name."
            type: "string"
          mime:
            description: "Mimetype."
            type: "string"
          readonly:
            description: "Readonly only affects the content of the node but not metadata."
            type: "boolean"
            default: false
          directory:
            description: "If node is of type Collection this flag is true."
            type: "boolean"
            default: false
          meta:
            $ref: '#/definitions/core.v2.NodeMeta'
          size:
            description: "The size in bytes. If the node is of type collection the size is the number of child nodes."
            type: "number"
            default: 0
          path:
            description: "The path abstraction of the node."
            type: "string"
          access:
            description: "Access level."
            type: "string"
            default: rw
            enum:
            - rw
            - w
            - m
            - w+
          parent:
            description: "Points to the parent collection. If the nodes is in the root this is null."
            type: "object"
            properties:
              id:
                description: "The id of the parent collection"
                type: "string"
              name:
                description: "The name of the parent collection"
                type: "string"
          share:
            description: "Points to the shared node (or share reference). If the node is not part of any share this is null."
            type: "object"
            properties:
              id:
                description: "The id of the share collection. If the share is a reference (incoming share) it will point to the share reference and not the id of the shared collection itself."
                type: "string"
              name:
                description: "The name of the share (or share reference)."
                type: "string"
          shareowner:
            description: "Points to the share owner. If the node is not part of any share this is null."
            type: "object"
            properties:
              id:
                description: "The id of the share owner."
                type: "string"
              name:
                description: "The username of the share owner."
                type: "string"
          subscription:
            description: "Is true if the user has an active subscription on this node."
            type: "boolean"
            default: false
          subscription_exclude_me:
            description: "Subscription excludes actions from the subscribed user itself."
            type: "boolean"
            default: false
          sharelink_has_password:
            description: "Is true if the node has a protected public sharelink."
            type: "boolean"
            default: false
  core.v2.Collections:
    description: "A list of collections."
    allOf:
      - $ref: '#/definitions/core.v2.ResourceList'
      - type: object
        properties:
          data:
            type: "array"
            items:
              $ref: "#/definitions/core.v2.Collection"
  core.v2.Collection:
    description: "A collection can hold an unlimited number of child nodes."
    allOf:
      - $ref: '#/definitions/core.v2.Node'
  core.v2.Files:
    description: "A list of files."
    allOf:
      - $ref: '#/definitions/core.v2.ResourceList'
      - type: object
        properties:
          data:
            type: "array"
            items:
              $ref: "#/definitions/core.v2.File"
  core.v2.File:
    description: "A collection can hold an unlimited number of child nodes."
    allOf:
      - $ref: '#/definitions/core.v2.Node'
      - type: object
        properties:
          version:
            description: "The content version. Does increase if the content gets changed."
            type: "number"
            default: 1
          hash:
            description: "MD5 content checksum."
            type: "string"
          preview:
            description: "Is true if there is a preview"
            type: "boolean"
  core.v2.FileHistory:
    description: "File history."
    type: object
    properties:
      version:
        description: "The version number."
        type: "number"
        default: 1
      changed:
        description: "ISO 8601 timestamp when the resource was changed."
        type: "string"
        format: date-time
      type:
        description: "Type of change."
        type: "number"
      user:
        description: "Resolves to user who executed the operation."
        type: "object"
        properties:
          id:
            description: "The id of the share owner."
            type: "string"
          name:
            description: "The username of the share owner."
            type: "string"
  core.v2.Delta:
    description: "The delta is a differential feed to get changes since the last delta call."
    type: object
    properties:
      reset:
        description: "If true the client needs to reset its state."
        type: "boolean"
        default: false
      cursor:
        description: "ACL rules."
        type: string
      has_more:
        description: "If true the server has more entries and the client must send another request with the latest cursor."
        type: boolean
        default: false
      nodes:
        type: array
        items:
          $ref: '#/definitions/core.v2.Node'
  core.v2.Share:
    description: "Node share."
    type: object
    properties:
      share_name:
        description: "The name of the share. By default the name of the node."
        type: "string"
      acl:
        description: "ACL rules."
        type: array
        items:
          $ref: '#/definitions/core.v2.AclRule'
  core.v2.AclRule:
    description: "ACL rule."
    type: object
    properties:
      type:
        description: "The type of the resource."
        type: "string"
        enum:
        - user
        - group
      id:
        description: "ACL rules."
        type: string
      privilege:
        description: "Privilege."
        type: string
        enum:
        - rw
        - w
        - m
        - w+
        - d
      role:
        description: "Points to the share owner. If the node is not part of any share this is null."
        type: "object"
        properties:
          id:
            description: "The id of the role resource."
            type: "string"
          name:
            description: "The name of role resource."
            type: "string"
  core.v2.UserNodeAttributeSummary:
    description: "Request node fiel statistics."
    type: object
    additionalProperties:
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
          sum:
            type: number
  core.v2.ChunkSession:
    description: "Chunking upload session."
    type: object
    properties:
      session:
        description: "The upload session id"
        type: string
      chunks_left:
        description: "Tells how many chunks are left to upload."
        type: number
  core.v2.EventLogs:
    description: "A list of events."
    allOf:
      - $ref: '#/definitions/core.v2.ResourceList'
      - type: object
        properties:
          data:
            type: "array"
            items:
              $ref: "#/definitions/core.v2.EventLog"
  core.v2.EventLog:
    description: "Event log entry. Each event represents an executed operation on the server."
    type: object
    properties:
      event:
        description: "The event id."
        type: "string"
      timestamp:
        description: "ISO 8601 timestamp when the event was created."
        type: "string"
      operation:
        description: "The event operation."
        type: "string"
        enum:
        - deleteCollectionReference
        - deleteCollectionShare
        - deleteCollection
        - addCollection
        - addFile
        - addCollectionShare
        - addCollectionReference
        - undeleteFile
        - undeleteCollectionReference
        - undeleteCollectionShare
        - restoreFile
        - renameFile
        - renameCollection
        - renameCollectionShare
        - renameCollectionReference
        - copyFile
        - copyCollection
        - copyCollectionShare
        - copyCollectionRFeference
        - moveFile
        - moveCollection
        - moveCollectionReference
        - moveCollectionShare
      node:
        description: "Resolves to the node involved in the operation."
        type: "object"
        properties:
          id:
            description: "The id of the node"
            type: "string"
          name:
            description: "The name of the node"
            type: "string"
      parent:
        description: "Points to the parent collection. If the node is in the root this is null."
        type: "object"
        properties:
          id:
            description: "The id of the parent collection"
            type: "string"
          name:
            description: "The name of the parent collection"
            type: "string"
      share:
        description: "Points to the shared node (or share reference). If the node is not part of any share this is null."
        type: "object"
        properties:
          id:
            description: "The id of the share collection. If the share is a reference (incoming share) it will point to the share reference and not the id of the shared collection itself."
            type: "string"
          name:
            description: "The name of the share (or share reference)."
            type: "string"
      user:
        description: "Resolves to user who executed the operation."
        type: "object"
        properties:
          id:
            description: "The id of the share owner."
            type: "string"
          name:
            description: "The username of the share owner."
            type: "string"
      client:
        description: "Describes the client from which the operation was executed."
        type: "object"
        properties:
          type:
            description: "The type of the client."
            type: "string"
          app:
            description: "The client app name."
            type: "string"
          v:
            description: "The version of the client app."
            type: "string"
          hostname:
            description: "The hostname of the client."
            type: "string"
  office.v2.WopiDocument:
    description: "WOPI document https://wopi.readthedocs.io/projects/wopirest/en/latest/files/CheckFileInfo.html"
    type: object
    properties:
      BaseFileName:
        type: "string"
      Size:
        type: "string"
      Version:
        type: "string"
      OwnerId:
        type: "string"
      UserId:
        type: "string"
      UserFriendlyName:
        type: "string"
      UserCanWrite:
        type: "boolean"
      PostMessageOrigin:
        type: "string"
  notification.v2.Mail:
    description: "Mail"
    type: object
    properties:
      receiver:
        type: "array"
        items:
          type: string
          format: mail
      subject:
        type: string
      body:
        type: string
  notification.v2.Notifications:
    description: "A list of notifications."
    allOf:
      - $ref: '#/definitions/core.v2.ResourceList'
      - type: object
        properties:
          data:
            type: "array"
            items:
              $ref: "#/definitions/notification.v2.Notification"
  notification.v2.Notification:
    description: "A notification"
    allOf:
      - $ref: '#/definitions/core.v2.Resource'
      - type: object
        properties:
          locale:
            description: "Notification locale. A locale contains a static message which is of a given locale."
            type: "string"
            default: en_US
          subject:
            description: "Subject."
            type: "string"
          message:
            description: "Message."
            type: "string"
          sender:
            description: "Points to the message. If there is no sender (For example the message came from the system itself) this is null."
            type: "object"
            properties:
              id:
                description: "The id of the sender."
                type: "string"
              name:
                description: "The username of the sender."
                type: "string"
          node:
            description: "A notification may point to a node. If there is no node given this is null."
            type: "object"
            properties:
              id:
                description: "The id of the node."
                type: "string"
              name:
                description: "The name of the node."
                type: "string"
  convert.v2.Slaves:
    description: "A list of convert slaves."
    allOf:
      - $ref: '#/definitions/core.v2.ResourceList'
      - type: object
        properties:
          data:
            type: "array"
            items:
              $ref: "#/definitions/convert.v2.Slave"
  convert.v2.Slave:
    description: "A convert slave"
    allOf:
      - $ref: '#/definitions/core.v2.Resource'
      - type: object
        properties:
          format:
            description: "Slave format."
            type: "string"
          master:
            description: "Master node from which the slave is from."
            type: "object"
            properties:
              id:
                description: "The id of the node."
                type: "string"
              name:
                description: "The name of the node."
                type: "string"
          slave:
            description: "The generated slave node. As long as the slave has not yet been created this is null."
            type: "object"
            properties:
              id:
                description: "The id of the node."
                type: "string"
              name:
                description: "The name of the node."
                type: "string"

