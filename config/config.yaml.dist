MongoDB\Client:
  arguments:
    uri: "{ENV(BALLOON_MONGODB_URI,mongodb://localhost:27017)}"
MongoDB\Database:
  use: '{MongoDB\Client}'
  calls:
    - method: selectDatabase
      select: true
      arguments:
        databaseName: '{ENV(BALLOON_MONGODB_DATABASE,balloon)}'
Balloon\Bootstrap\Cli:
  calls:
    Balloon.App.Cli: {method: inject, arguments:{object: '{Balloon\App\Cli\Constructor\Cli}'}}
Balloon\Bootstrap\AbstractBootstrap:
  calls:
    Balloon.App.Api: {method: inject, arguments:{object: '{Balloon\App\Api\Constructor\Http}'}}
    Balloon.App.Burl: {method: inject, arguments:{object: '{Balloon\App\Burl\Constructor\Http}'}}
    Balloon.App.Webdav: {method: inject, arguments:{object: '{Balloon\App\Webdav\Constructor\Http}'}}
    Balloon.App.Sharelink: {method: inject, arguments:{object: '{Balloon\App\Sharelink\Constructor\Http}'}}
    Balloon.App.Convert: {method: inject, arguments:{object: '{Balloon\App\Convert\Constructor\Http}'}}
    Balloon.App.DesktopClient: {method: inject, arguments:{object: '{Balloon\App\DesktopClient\Constructor\Http}'}}
    Balloon.App.Preview: {method: inject, arguments:{object: '{Balloon\App\Preview\Constructor\Http}'}}
    Balloon.App.ClamAv: {method: inject, arguments:{object: '{Balloon\App\ClamAv\Constructor\Http}'}}
    Balloon.App.Elasticsearch: {method: inject, arguments:{object: '{Balloon\App\Elasticsearch\Constructor\Http}'}}
    Balloon.App.Notification: {method: inject, arguments:{object: '{Balloon\App\Notification\Constructor\Http}'}}
    Balloon.App.Office: {method: inject, arguments:{object: '{Balloon\App\Office\Constructor\Http}'}}
Balloon\Server:
  arguments:
    config:
      max_file_version: 16
      server_url: "{ENV(BALLOON_URL,https://localhost)}"
      password_policy: '#^.*$#'
      password_hash: 1
Balloon\App\ClamAv\Scanner:
  arguments:
    config:
      socket: "{ENV(BALLOON_CLAMAV_URI,unix:///var/run/clamav/clamd.ctl)}"
      max_stream_size: 26214400
      aggressiveness: 2
      timeout: 30
Balloon\App\Notification\Notifier:
  calls:
    Balloon\App\Notification\Adapter\Db:
      method: injectAdapter
      arguments:
        adapter: '{Balloon\App\Notification\Adapter\Db}'
    Balloon\App\Notification\Adapter\Mail:
      method: injectAdapter
      arguments:
        adapter: '{Balloon\App\Notification\Adapter\Mail}'
Balloon\App\Notification\TemplateHandler:
  arguments:
    config:
      fallback_locale: en_US
      #asset_dir:
Balloon\Async\Mail:
  arguments:
    config:
      sender_address: "{ENV(BALLOON_SENDER_ADDRESS,noreply@localhost)}"
      sender_name: "{ENV(BALLOON_SENDER_NAME,balloon)}"
Balloon\App\Elasticsearch\Console\Elasticsearch:
  arguments:
    config:
      bulk: 200
Balloon\App\Elasticsearch\Job:
  arguments:
    config:
      size_limit: 52428800
Balloon\App\Notification\Async\Subscription:
  arguments:
    config:
      notification_throttle: 120
Balloon\App\Elasticsearch\Migration\Delta\Installation:
  arguments:
    config:
      #index_configuration: "/path/to/index.json"
Balloon\App\DesktopClient\Constructor\Http:
  arguments:
    config:
      github_request_url: "https://api.github.com/repos/gyselroth/balloon-client-desktop/releases/latest"
      github_request_timeout: 10
      github_request_useragent: "balloon server"
      #formats: ""
      #github_asset_mapping: ""
TaskScheduler\Scheduler:
  arguments:
    config:
      job_queue_size: 1000000
      event_queue_size: 5000000
TaskScheduler\WorkerManager:
  arguments:
    config:
      pm: dynamic
      max_children: 4
      min_children: 2
Zend\Mail\Transport\SmtpOptions:
  arguments:
    options:
      host: '{ENV(BALLOON_SMTP_HOST,127.0.0.1)}'
      port: 25
Zend\Mail\Transport\TransportInterface:
  use: "Zend\\Mail\\Transport\\Smtp"
Balloon\Filesystem\Node\Factory:
  services:
    Balloon\Filesystem\Storage\Adapter\AdapterInterface:
      use: "Balloon\Filesystem\Storage\Adapter\Gridfs"
Balloon\Hook:
  calls:
    Balloon\Hook\Delta:
      method: injectHook
      arguments:
        hook: '{Balloon\Hook\Delta}'
    Balloon\Hook\CleanTrash:
      method: injectHook
      arguments:
        hook: '{Balloon\Hook\CleanTrash}'
    Balloon\Hook\AutoDestroy:
      method: injectHook
      arguments:
        hook: '{Balloon\Hook\AutoDestroy}'
    Balloon\Hook\CleanTempStorage:
      method: injectHook
      arguments:
        hook: '{Balloon\Hook\CleanTempStorage}'
  services:
    Balloon\Hook\Delta:
    Balloon\Hook\AutoCreateUser:
      arguments:
        config:
          attributes:
            soft_quota:
                type: int
                value: 1000000
            hard_quota:
                type: int
                value: 1000000
    Balloon\Hook\CleanTrash:
      arguments:
        config:
          interval: 28800
          max_age: 5184000
    Balloon\Hook\AutoDestroy:
      arguments:
        config:
          interval: 28800
    Balloon\Hook\CleanTempStorage:
      arguments:
        config:
          interval: 172800
          max_age: 172800
    Balloon\Hook\ExternalStorage:
      arguments:
        config:
          interval: 86400
ParagonIE\Halite\Symmetric\EncryptionKey:
  services:
    ParagonIE\Halite\HiddenString:
      arguments:
        value: "{ENV(BALLOON_ENCRYPTION_KEY,3140040033da9bd0dedd8babc8b89cda7f2132dd5009cc43c619382863d0c75e172ebf18e713e1987f35d6ea3ace43b561c50d9aefc4441a8c4418f6928a70e4655de5a9660cd323de63b4fd2fb76525470f25311c788c5e366e29bf60c438c4ac0b440e)}"
Balloon\Converter:
  calls:
    Balloon\Converter\Adapter\ImagickImage:
      method: injectAdapter
      arguments:
        adapter: '{Balloon\Converter\Adapter\ImagickImage}'
    Balloon\App\Office\Converter\Adapter\Office:
      method: injectAdapter
      arguments:
        adapter: '{Balloon\App\Office\Converter\Adapter\Office}'
    Balloon\App\Burl\Converter\Adapter\Burl:
      method: injectAdapter
      arguments:
        adapter: '{Balloon\App\Burl\Converter\Adapter\Burl}'
    Balloon\App\Markdown\Converter\Adapter\Markdown:
      method: injectAdapter
      arguments:
        adapter: '{Balloon\App\Markdown\Converter\Adapter\Markdown}'
  services:
    Balloon\Converter\Adapter\ImagickImage:
      arguments:
        config:
          preview_max_size: 1000
    Balloon\App\Office\Converter\Adapter\Office:
      arguments:
        config:
          preview_max_size: 1000
      services:
        GuzzleHttp\ClientInterface:
          arguments:
            config:
              base_uri: "{ENV(BALLOON_LIBREOFFICE_URL,https://localhost:9980)}"
              connect_timeout: 3
              timeout: 10
              verify: false
    Balloon\App\Burl\Converter\Adapter\Burl:
      arguments:
        config:
          preview_max_size: 1000
      services:
        GuzzleHttp\ClientInterface:
          arguments:
            config:
              base_uri: "{ENV(BALLOON_BURL_BROWSERLESS_URL,https://chrome.browserless.io)}"
              connect_timeout: 3
              timeout: 10
              verify: false
Psr\Log\LoggerInterface:
  use: "Monolog\\Logger"
  arguments:
    name: default
  calls:
    stderr:
      method: pushHandler
      arguments:
        handler: '{stderr}'
    stdout:
      method: pushHandler
      arguments:
        handler: '{stdout}'
  services:
    Monolog\Formatter\FormatterInterface:
      use: Monolog\Formatter\LineFormatter
      arguments:
        dateFormat: "Y-m-d H:i:s"
        format: "%datetime% [%context.category%,%level_name%]: %message% %context.params% %context.exception%\n"
      calls:
        - method: includeStacktraces
    stderr:
      use: Monolog\Handler\StreamHandler
      arguments:
        stream: 'php://stderr'
        level: 600
      calls:
        formatter:
          method: setFormatter
    stdout:
      use: Monolog\Handler\FilterHandler
      arguments:
        handler: '{output}'
        minLevelOrList: 100
        maxLevel: 550
      services:
        output:
          use: Monolog\Handler\StreamHandler
          arguments:
            stream: 'php://stdout'
            level: 100
          calls:
            formatter:
              method: setFormatter
Micro\Auth\Auth:
  calls:
    basic_db:
      method: injectAdapter
      arguments:
        adapter: '{basic_db}'
  services:
    basic_db:
      use: "Balloon\\Auth\\Adapter\\Basic\\Db"
    oidc:
      use: "Micro\\Auth\\Adapter\\Oidc"
      arguments:
        config:
          provider_url: "https://openidconnect.example.net"
    ldap:
      use: "Micro\\Auth\\Adapter\\Basic\\Ldap"
      services:
        Micro\Auth\Ldap:
          arguments:
            config:
              uri: "ldap://localhost:389"
              basedn: "dc=example,dc=org"
              binddn: "cn=admin,dc=example,dc=org"
              bindpw: 1234
              tls: true
              options:
                LDAP_OPT_PROTOCOL_VERSION: 3
      arguments:
        config:
          account_filter: "(uid=%s)"
          attr_sync_cache: 3600
          map:
            namespace:
              type: "string"
              attr: "o"
            avatar:
              type: "binary"
              attr: "jpegphoto"
            hard_quota:
              type: "int"
              attr: "customhardquota"
            soft_quota:
              type: "int"
              attr: "customsoftquota"
            mail:
              type: "string"
              attr: "mail"
