openapi: 3.0.0
info:
  description: balloon API
  version: 1.0.0
  title: balloon API
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  /api:
    get:
      tags:
        - core.v3
      summary: Get server status
      operationId: getApi
      responses:
        "200":
          description: API root
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.ApiRoot"
  /api/v3:
    get:
      tags:
        - core.v3
      summary: Get server status
      operationId: getv3
      responses:
        "200":
          description: API root
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.ApiRoot"
  /api/v3/groups:
    get:
      tags:
        - core.v3
      summary: Get groups
      description: A group is a colletion of users
      operationId: getGroups
      parameters:
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          schema:
            type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          schema:
            type: array
            items:
              type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          schema:
            type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          schema:
            type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          schema:
            type: string
      responses:
        "200":
          description: List of groups
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.Groups"
        "403":
          description: Access denied
    post:
      tags:
        - core.v3
      summary: Add new group
      operationId: addGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v3.Group"
      responses:
        "201":
          description: If successful the server will respond with 201 Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.Group"
        "403":
          description: Access denied
  "/api/v3/groups/{group}":
    get:
      tags:
        - core.v3
      operationId: getGroup
      summary: Get single group
      parameters:
        - name: group
          in: path
          required: true
          description: Resource identifier
          schema:
            type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.Group"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
    patch:
      tags:
        - core.v3
      summary: Set attributes for group
      operationId: patchGroup
      parameters:
        - name: group
          in: path
          required: true
          description: Resource identifier
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v3.Group"
        description: Set attributes for group
        required: true
      responses:
        "200":
          description: Group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.Group"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
    delete:
      tags:
        - core.v3
      summary: Delete group
      operationId: deleteGroup
      parameters:
        - name: group
          in: path
          required: true
          description: Resource identifier
          schema:
            type: string
        - name: force
          in: query
          required: false
          description: Per default the group gets disabled, if force is set the group gets
            removed completely.
          schema:
            type: boolean
      responses:
        "204":
          description: If successful the server will respond with 204 No Content
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  "/api/v3/groups/{group}/members":
    get:
      tags:
        - core.v3
      summary: Request all member of a group
      operationId: getGroupMembers
      parameters:
        - name: group
          in: path
          required: true
          description: Resource identifier
          schema:
            type: string
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Users.v3"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  "/api/v3/groups/{group}/undelete":
    post:
      tags:
        - core.v3
      summary: Restore deleted group
      operationId: undeleteGroup
      parameters:
        - name: group
          in: path
          required: true
          description: Resource identifier
          schema:
            type: string
      responses:
        "200":
          description: Group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.Group"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  /api/v3/users:
    get:
      tags:
        - core.v3
      summary: Get users
      description: A user is a colletion of users
      operationId: getUsers
      parameters:
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          schema:
            type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          schema:
            type: array
            items:
              type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          schema:
            type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          schema:
            type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          schema:
            type: string
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Users.v3"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
    post:
      tags:
        - core.v3
      summary: Add new user
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Users.v3"
      responses:
        "201":
          description: If successful the server will respond with 201 Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users.v3"
        "403":
          description: Access denied
  "/api/v3/users/{user}":
    get:
      tags:
        - core.v3
      operationId: getUser
      summary: Get single user
      parameters:
        - name: user
          in: path
          required: true
          description: Resource identifier
          schema:
            type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users.v3"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
    patch:
      tags:
        - core.v3
      summary: Set attributes for user
      operationId: patchUser
      parameters:
        - name: user
          in: path
          required: true
          description: Resource identifier
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Users.v3"
        description: Set attributes for user
        required: true
      responses:
        "200":
          description: User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users.v3"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
    delete:
      tags:
        - core.v3
      summary: Delete user
      operationId: deleteUser
      parameters:
        - name: user
          in: path
          required: true
          description: Resource identifier
          schema:
            type: string
        - name: force
          in: query
          required: false
          description: Per default the user gets disabled, if force is set the user gets
            removed completely.
          schema:
            type: boolean
      responses:
        "204":
          description: If successful the server will respond with 204 No Content
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  "/api/v3/users/{user}/node-attribute-summary":
    get:
      tags:
        - core.v3
      summary: Get summary of node usage.
      operationId: getNodeAttributeSummary
      parameters:
        - name: user
          in: path
          required: true
          description: Resource identifier
          schema:
            type: string
      responses:
        "200":
          description: User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users.v3NodeAttributeSummary"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  "/api/v3/users/{user}/groups":
    get:
      tags:
        - core.v3
      summary: Request all groups of a user
      operationId: getUserGroups
      parameters:
        - name: user
          in: path
          required: true
          description: Resource identifier
          schema:
            type: string
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          schema:
            type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          schema:
            type: array
            items:
              type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          schema:
            type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          schema:
            type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Groups
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.Groups"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  "/api/v3/users/{user}/undelete":
    post:
      tags:
        - core.v3
      summary: Restore deleted user
      operationId: undeleteUser
      parameters:
        - name: user
          in: path
          required: true
          description: Resource identifier
          schema:
            type: string
      responses:
        "200":
          description: User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users.v3"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  /api/v3/users/whoami:
    get:
      tags:
        - core.v3
      summary: Get user object of the current authenticated user
      operationId: getCurrentUser
      parameters:
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users.v3"
  "/api/v3/users/{user}/avatar":
    get:
      tags:
        - core.v3
      summary: Get user avatar
      operationId: getUserAvatar
      parameters:
        - name: user
          in: path
          required: true
          description: Resource identifier
          schema:
            type: string
      responses:
        "200":
          description: Binaray user avatar
          content:
            octet/stream:
              schema:
                $ref: "#/components/schemas/Users.v3"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  /api/v3/nodes/trash:
    get:
      tags:
        - core.v3
      summary: Return delete nodes (Excluding sub nodes of deleted collections)
      operationId: getDeletedNodes
      parameters:
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          schema:
            type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          schema:
            type: array
            items:
              type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          schema:
            type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          schema:
            type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Nodes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Nodes.v3"
  /api/v3/nodes/search:
    get:
      tags:
        - ballon.app.elasticsearch.v3
      summary: Extended search query using elasticsearch
      operationId: queryElasticsearch
      parameters:
        - name: query
          in: query
          required: true
          description: Elasticsearch query as JSON
          schema:
            type: string
        - name: deleted
          in: query
          required: false
          description: "Wherever include deleted nodes or not, possible values:  0 Exclude
            deleted 1 Only deleted 2 Include deleted."
          schema:
            type: number
      responses:
        "200":
          description: Nodes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Nodes.v3"
  /api/v3/notifications:
    get:
      tags:
        - balloon.app.notifications.v3
      summary: Get my nofitifications
      operationId: getMyNotifications
      parameters:
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          schema:
            type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          schema:
            type: array
            items:
              type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          schema:
            type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          schema:
            type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          schema:
            type: string
      responses:
        "200":
          description: List of notifications
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.Balloon.App.Notfification.Notifications"
    post:
      tags:
        - balloon.app.notifications.v3
      summary: Send notification
      operationId: postNotification
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v3.Balloon.App.Notfification.Notification"
      responses:
        "202":
          description: Notification
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.Balloon.App.Notfification.Notification"
  "/api/v3/notifications/{notification}":
    get:
      tags:
        - balloon.app.notifications.v3
      summary: Get a single notification
      operationId: getNotification
      parameters:
        - name: notification
          in: path
          required: true
          description: Resource identifier
          schema:
            type: string
      responses:
        "200":
          description: Notification
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.Balloon.App.Notfification.Notification"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
    delete:
      tags:
        - balloon.app.notifications.v3
      summary: Delete a notification
      operationId: deleteNotification
      parameters:
        - name: notification
          in: path
          required: true
          description: Resource identifier
          schema:
            type: string
      responses:
        "204":
          description: If successful the server will respond with 204 No Content
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  /api/v3/notifications/broadcast:
    post:
      tags:
        - balloon.app.notifications.v3
      summary: Send notification to all users
      operationId: sendBroadcast
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v3.Balloon.App.Notfification.Notification"
        description: Notification
      responses:
        "202":
          description: Notification
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.Balloon.App.Notfification.Notification"
        "403":
          description: Access denied
  /api/v3/notifications/mail:
    post:
      tags:
        - balloon.app.notifications.v3
      summary: Send mail
      operationId: sendMail
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v3.Balloon.App.Notfification.Mail"
        description: Mail
      responses:
        "202":
          description: Mail
        "403":
          description: Access denied
  "/api/v3/nodes/{node}/subscription":
    post:
      tags:
        - balloon.app.notifications.v3
      summary: Receive node updates
      operationId: subscribeNode
      parameters:
        - name: node
          in: path
          required: true
          description: Node identifier
          schema:
            type: string
        - name: subscribe
          in: query
          required: false
          description: If true the subscription is active
          schema:
            type: boolean
        - name: exclude_me
          in: query
          required: false
          description: Exclude subscription owner (me) from change notifications
          schema:
            type: boolean
        - name: recursive
          in: query
          required: false
          description: Apply subscription to children (inclusive newly added children)
          schema:
            type: boolean
      responses:
        "202":
          description: Node
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node.v3"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  "/api/v3/files/{file}/convert/slaves":
    get:
      tags:
        - balloon.app.convert.v3
      summary: Get existing convert slaves
      operationId: getSlaves
      parameters:
        - name: file
          in: path
          required: true
          description: File identifier
          schema:
            type: string
      responses:
        "200":
          description: Slaves
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.Balloon.App.Convert.Slaves"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
    post:
      tags:
        - balloon.app.convert.v3
      summary: Add new convert slave
      operationId: addSlave
      parameters:
        - name: file
          in: path
          required: true
          description: File identifier
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v3.Balloon.App.Convert.Slave"
        description: "Add new conversion slave "
        required: true
      responses:
        "202":
          description: Slave
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.Balloon.App.Convert.Slave"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  "/api/v3/files/{file}/convert/slaves/{slave}":
    get:
      tags:
        - balloon.app.convert.v3
      summary: Get single slave
      operationId: getSlave
      parameters:
        - name: file
          in: path
          required: true
          description: File identifier
          schema:
            type: string
        - name: slave
          in: path
          required: true
          description: Slave identifier
          schema:
            type: string
      responses:
        "200":
          description: Slave
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.Balloon.App.Convert.Slave"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
    delete:
      tags:
        - balloon.app.convert.v3
      summary: Delete slave
      operationId: deleteSlave
      parameters:
        - name: file
          in: path
          required: true
          description: File identifier
          schema:
            type: string
        - name: slave
          in: path
          required: true
          description: Slave identifier
          schema:
            type: string
      responses:
        "204":
          description: If successful the server will respond with 204 No Content
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  "/api/v3/files/{file}/convert/supported-formats":
    get:
      tags:
        - balloon.app.convert.v3
      summary: Get supported file formats to convert to (formats do vary between files)
      operationId: getSupportedFormats
      parameters:
        - name: file
          in: path
          required: true
          description: File identifier
          schema:
            type: string
      responses:
        "200":
          description: Formats
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  "/api/v3/desktop-clients/{format}/content":
    get:
      tags:
        - balloon.app.desktopclient.v3
      summary: Download balloon desktop client
      operationId: getDesktopClient
      parameters:
        - name: format
          in: path
          required: true
          description: Request client foramt (deb, rpm, exe, pkg, zip or a custom format)
          schema:
            type: string
            enum:
              - deb
              - rpm
              - exe
              - pkg
              - zip
      responses:
        "200":
          description: Desktop client (binary)
          content:
            octet/stream:
              schema:
                type: string
                format: binary
  /api/v3/office/wopi/document:
    get:
      tags:
        - balloon.app.office.v3
      summary: Get document session information including document owner, session user
        and document size
      operationId: getWopiDocument
      parameters:
        - name: id
          in: query
          required: true
          description: The document id
          schema:
            type: string
        - name: access_token
          in: query
          required: true
          description: An access token to access the document
          schema:
            type: string
      responses:
        "200":
          description: WOPI document information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.Balloon.App.Office.WopiDocument"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  "/api/v3/office/documents/{document}":
    get:
      tags:
        - balloon.app.office.v3
      summary: Retreive office document
      operationId: getDocument
      parameters:
        - name: document
          in: path
          required: true
          description: Document identifier
          schema:
            type: string
      responses:
        "200":
          description: Document session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.Balloon.App.Office.Document"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  /api/v3/office/wopi/document/contents:
    get:
      tags:
        - balloon.app.office.v3
      summary: Get document contents
      operationId: getWopiDocumentContent
      parameters:
        - name: id
          in: query
          required: true
          description: "The document id "
          schema:
            type: string
        - name: access_token
          in: query
          required: true
          description: An access token to access the document
          schema:
            type: string
      responses:
        "200":
          description: Contents
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
    post:
      tags:
        - balloon.app.office.v3
      summary: Save document contents
      operationId: updateWopiDocuemntContent
      parameters:
        - name: id
          in: query
          required: true
          description: "The document id "
          schema:
            type: string
        - name: access_token
          in: query
          required: true
          description: An access token to access the document
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Document content
      responses:
        "200":
          description: Operation was successful
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  /api/v3/office/documents:
    post:
      tags:
        - balloon.app.office.v3
      description: Create new document from an existing office document template
      operationId: createDocument
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/v3.File"
        required: true
      responses:
        "201":
          description: File
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.File"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  "/api/v3/nodes/{node}/clone":
    post:
      tags:
        - core.v3
      summary: Clone existing node
      operationId: cloneNode
      parameters:
        - name: node
          in: path
          required: true
          description: Node identifier
          schema:
            type: string
        - name: destid
          in: query
          required: false
          description: Destination collection, if this is null root is taken
          schema:
            type: string
        - name: conflict
          in: query
          required: false
          description: Conflict resolution
          schema:
            type: number
            enum:
              - 0
              - 1
              - 2
            default: 0
      responses:
        "201":
          description: Node
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node.v3"
        "207":
          description: Multi status if batch request
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  "/api/v3/collections/{collection}/children":
    get:
      tags:
        - core.v3
      summary: Get all children of a collection
      operationId: getChildren
      parameters:
        - name: collection
          in: path
          required: true
          description: Parent collection
          schema:
            type: string
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          schema:
            type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          schema:
            type: array
            items:
              type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          schema:
            type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          schema:
            type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          schema:
            type: string
        - in: query
          name: recursive
          description: Include children recursively.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: List of children
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Nodes.v3"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  /api/v3/collections/children:
    get:
      tags:
        - core.v3
      summary: Get all children of the root collection
      operationId: getRootChildren
      parameters:
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          schema:
            type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          schema:
            type: array
            items:
              type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          schema:
            type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          schema:
            type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          schema:
            type: string
        - in: query
          name: recursive
          description: Include children recursively.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: List of children
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Nodes.v3"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  /api/v3/collections:
    get:
      tags:
        - core.v3
      summary: Get all collections
      operationId: getCollections
      parameters:
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          schema:
            type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          schema:
            type: array
            items:
              type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          schema:
            type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          schema:
            type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          schema:
            type: string
      responses:
        "200":
          description: List of collections
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.Collections"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
    post:
      tags:
        - core.v3
      summary: Create a new collection
      operationId: createCollection
      parameters:
        - name: collection
          in: path
          required: true
          description: Parent collection
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Collection"
      responses:
        "201":
          description: Collection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.Collection"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  /api/v3/files:
    get:
      tags:
        - core.v3
      summary: Get all files
      operationId: getFiles
      parameters:
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          schema:
            type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          schema:
            type: array
            items:
              type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          schema:
            type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          schema:
            type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          schema:
            type: string
        - name: deleted
          in: query
          required: false
          description: "Wheter include deleted nodes or not, possible values:  0 Exclude
            deleted 1 Only deleted 2 Include deleted  "
          schema:
            type: number
      responses:
        "200":
          description: List of files
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.Files"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
    post:
      tags:
        - core.v3
      summary: Add new file from upload
      operationId: createFile
      parameters:
      responses:
        "200":
          description: List of files
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File.v3"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  "/api/v3/files/{file}/history":
    get:
      tags:
        - core.v3
      summary: Get a full change history of a file
      operationId: getFileHistory
      parameters:
        - name: file
          in: path
          required: true
          description: File identifier
          schema:
            type: string
      responses:
        "200":
          description: File history
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/v3.FileHistory"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  /api/v3/nodes:
    get:
      tags:
        - core.v3
      summary: Get all nodes
      operationId: getNodes
      parameters:
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          schema:
            type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          schema:
            type: array
            items:
              type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          schema:
            type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          schema:
            type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          schema:
            type: string
        - name: deleted
          in: query
          required: false
          description: "Wheter include deleted nodes or not, possible values:  0 Exclude
            deleted 1 Only deleted 2 Include deleted  "
          schema:
            type: number
      responses:
        "200":
          description: List of nodes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Nodes.v3"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  "/api/v3/nodes/{node}":
    delete:
      tags:
        - core.v3
      summary: Delete node
      operationId: deleteNode
      parameters:
        - name: node
          in: path
          required: true
          description: Node identifier
          schema:
            type: string
        - name: force
          in: query
          required: false
          description: "Force flag need to be set to delete a node from trash (node must
            have the deleted flag) "
          schema:
            type: boolean
        - name: ignore_flag
          in: query
          required: false
          description: "If both ignore_flag and force_flag were set, the node will be
            deleted completely "
          schema:
            type: boolean
        - name: at
          in: query
          required: false
          description: Has to be a valid unix timestamp if so the node will destroy itself
            at this specified time instead immediatly
          schema:
            type: number
      responses:
        "204":
          description: If successful the server will respond with 204 No Content
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
    get:
      tags:
        - core.v3
      summary: Get single node
      operationId: getNode
      parameters:
        - name: node
          in: path
          required: true
          description: Node identifier
          schema:
            type: string
        - name: attributes
          in: query
          required: false
          description: Filter attributes
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Node
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node.v3"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
    patch:
      tags:
        - core.v3
      summary: Change attributes
      operationId: updateNode
      parameters:
        - name: node
          in: path
          required: true
          description: Node identifier
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Node.v3"
        description: "Change attributes "
        required: true
      responses:
        "200":
          description: Node
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node.v3"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  "/api/v3/nodes/{node}/share-link":
    delete:
      tags:
        - balloon.app.sharelink.v3
      summary: Delete an existing sharing link
      operationId: deleteLink
      parameters:
        - name: node
          in: path
          required: true
          description: Node identifier
          schema:
            type: string
      responses:
        "204":
          description: The server responds with 204 if operation was successful
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
    post:
      tags:
        - balloon.app.sharelink.v3
      summary: "Create a unique sharing link of a node (global accessible): a possible
        existing link will be deleted if this method will be called."
      operationId: createLink
      parameters:
        - name: node
          in: path
          required: true
          description: Node identifier
          schema:
            type: string
        - name: expiration
          in: query
          required: false
          description: Expire timestamp as unix timestap. Tells the server when the public
            link should expire automatically. The default is to never expire.
          schema:
            type: number
            default: 0
        - name: password
          in: query
          required: false
          description: Optionally set a password to protect the public link.
          schema:
            type: string
      responses:
        "201":
          description: Node
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node.v3"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  "/api/v3/nodes/{node}/content":
    get:
      tags:
        - core.v3
      summary: Download node contents. Note that collections are zipped on-the-fly.
      operationId: getContent
      parameters:
        - name: node
          in: path
          required: true
          description: Node identifier
          schema:
            type: string
        - name: Byte-Ranges
          in: header
          required: false
          description: "Read stream from a specific offset/limit in bytes "
          schema:
            type: number
        - name: encode
          in: query
          required: false
          description: Can be set to base64 to encode content as base64.
          schema:
            type: string
            enum:
              - base64
        - name: download
          in: query
          required: false
          description: "Force download file (Content-Disposition: attachment HTTP header)"
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Content
          content:
            octet/stream:
              schema:
                type: string
                format: binary
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  /api/v3/events:
    get:
      tags:
        - core.v3
      summary: Get event log containing all operations which are made by the user
        himself or share members
      operationId: getEvents
      parameters:
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          schema:
            type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          schema:
            type: array
            items:
              type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          schema:
            type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          schema:
            type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Event log
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Events.v3"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  "/api/v3/nodes/{node}/events":
    get:
      tags:
        - core.v3
      summary: Get event log containing all operations which are made by the user
        himself or share members on a given node
      operationId: getNodeEvents
      parameters:
        - name: node
          in: path
          required: true
          description: Node identifier
          schema:
            type: string
        - in: query
          name: query
          description: "Specify a MongoDB based resource query
            (https://docs.mongodb.com/manual/tutorial/query-documents) using
            JSON (For example: {\"name\": {$regex: 'foo.*'}})."
          required: false
          schema:
            type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          schema:
            type: array
            items:
              type: string
        - in: query
          name: offset
          description: Objects offset, per default it starts from 0. You may also request a
            negative offset which will return results from the end [total -
            offset].
          required: false
          schema:
            type: number
        - in: query
          name: limit
          description: Objects limit, per default 20 objects will get returned
          required: false
          schema:
            type: number
        - in: query
          name: sort
          description: 'Specify a MongoDB sort operation
            (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
            using JSON (For example: {"name": -1}).'
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Event log
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Events.v3"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  "/api/v3/nodes/{node}/parents":
    get:
      tags:
        - core.v3
      summary: The hirarchy of all parent nodes is ordered in a single level array
        beginning with the collection on the highest level.
      operationId: getParentNodes
      parameters:
        - name: node
          in: path
          required: true
          description: Node identifier
          schema:
            type: string
        - in: query
          name: attributes
          description: Filter attributes
          required: false
          schema:
            type: array
            items:
              type: string
        - name: self
          in: query
          required: false
          description: Include requested collection itself at the end of the list (Will be
            ignored if the requested node is a file)
          schema:
            type: boolean
      responses:
        "200":
          description: Parent nodes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Nodes.v3"
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
  "/api/v3/files/{file}/preview":
    get:
      tags:
        - ballon.app.preview.v3
      summary: Get a preview of the files content. The body either contains an encoded
        string or a jpeg binary.
      operationId: getPreview
      parameters:
        - name: file
          in: path
          required: true
          description: File identifier
          schema:
            type: string
        - name: encode
          in: query
          required: false
          description: Set to base64 to return a jpeg encoded preview as base64, else
            return it as jpeg binary
          schema:
            type: string
      responses:
        "200":
          description: Binara data
        "403":
          description: Access denied
        "404":
          description: Resource does not exists
servers:
  - url: /
components:
  requestBodies:
    Collection:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/v3.Collection"
      required: true
  schemas:
    JsonPatch:
      description: A JSON Patch according rfc6902.
      type: object
      required:
      - op
      - path
      - value
      properties:
        op:
          type: string
        path:
          type: string
        value:
          type: string
    Links.v3:
      description: Contains resource links (URL) to other resources.
      type: object
      properties:
        self:
          $ref: "#/components/schemas/Link.v3"
    ListLinks.v3:
      type: object
      properties:
        self:
          $ref: "#/components/schemas/Link.v3"
        prev:
          $ref: "#/components/schemas/Link.v3"
        next:
          $ref: "#/components/schemas/Link.v3"
    Link.v3:
      type: object
      properties:
        href:
          type: string
          readOnly: true
    List.v3:
      type: object
      properties:
        _links:
          $ref: "#/components/schemas/ListLinks.v3"
        kind:
          description: The resource type, always List.
          type: string
          default: List
          readOnly: true
        count:
          description: Holds the number of items in the current list response.
          type: number
          readOnly: true
        total:
          description: Holds the number of total available items on the server. Note that a
            List resource is always paged. You need to traverse with offset and
            limit to request further resources in the list.
          type: number
          readOnly: true
    Resource.v3:
      type: object
      properties:
        _links:
          $ref: "#/components/schemas/Links.v3"
        name:
          description: Resource identifier. Note that the name is immutable once created on
            the server and must be unique in its own resource context.
          type: string
          pattern: '^[a-z\-\_0-9]+$'
        id:
          description: Unique 12-byte resource identifier. Note this is a MongoDB ObjectId.
            The name is the standard resource identifier, the id only useful to
            verify that a given resource was completely recreated. An ID is
            immutable and will be created on the server.
          type: string
          readOnly: true
        version:
          description: The version of the resource. A version gets increased once the
            resource have been modified.
          type: number
          readOnly: true
        created:
          description: ISO 8601 timestamp when the resource was created.
          type: string
          readOnly: true
        changed:
          description: ISO 8601 timestamp when the resource was changed.
          type: string
          readOnly: true
    Users.v3:
      description: A list of users.
      allOf:
        - $ref: "#/components/schemas/List.v3"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Users.v3"
    User.v3:
      description: A balloon user.
      allOf:
        - $ref: "#/components/schemas/Resource.v3"
        - type: object
          required:
          - data
          - name
          properties:
            kind:
              description: The resource type, always User.
              type: string
              default: User
            data:
              description: The user information.
              type: object
              properties:
                password:
                  description: The users password. Gets hashed on the server and can not be
                    retrieved after.
                  type: string
                username:
                  description: Unique username.
                  type: string
                name:
                  description: Display name (Usuallly same as username).
                  type: string
                admin:
                  description: Admin user flag.
                  type: boolean
                  default: false
                namespace:
                  description: User namespace.
                  type: string
                locale:
                  description: User locale.
                  type: string
                  default: en_US
                auth:
                  description: Authentication source.
                  type: string
                  default: internal
                  enum:
                    - internal
                    - external
                hard_quota:
                  description: Hard quota in bytes (Max. limit of storage usage). Note that
                    external storage is not part of the quota. The default is no
                    limit.
                  type: number
                  default: -1
                soft_quota:
                  description: Soft quota in bytes (Warning of high quota usage). The default
                    is no limit.
                  type: number
                  default: -1
                available:
                  description: Available storage in bytes. Is -1 if there is no hard_quota.
                  type: number
                  default: -1
                used:
                  description: Used storage in bytes.
                  type: number
                  default: 0

    ApiRoot:
      description: Describes the api root.
      type: object
      properties:
        name:
          type: string
        api:
          type: number
    Links:
      description: Contains resource links (URL) to other resources.
      type: object
      properties:
        self:
          $ref: "#/components/schemas/v3.Link"
    ListLinks:
      type: object
      properties:
        self:
          $ref: "#/components/schemas/v3.Link"
        prev:
          $ref: "#/components/schemas/v3.Link"
        next:
          $ref: "#/components/schemas/v3.Link"
    Link:
      type: object
      properties:
        href:
          type: string
    ResourceList:
      type: object
      properties:
        _links:
          $ref: "#/components/schemas/v3.ListLinks"
        kind:
          description: The resource type, always List.
          type: string
          default: List
        count:
          description: Holds the number of items in the current list response.
          type: number
        total:
          description: Holds the number of total available items on the server. Note that a
            List resource is always paged. You need to traverse with offset and
            limit to request further resources in the list.
          type: number
    Resource:
      type: object
      properties:
        _links:
          $ref: "#/components/schemas/v3.Links"
        id:
          description: Unique 12-byte resource identifier. Note this is a MongoDB ObjectId.
            The name is the standard resource identifier, the id only useful to
            verify that a given resource was completely recreated. An ID is
            immutable and will be created on the server.
          type: string
        created:
          description: ISO 8601 timestamp when the resource was created.
          type: string
    Groups:
      description: A list of groups.
      allOf:
        - $ref: "#/components/schemas/v3.ResourceList"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/v3.Group"
    Group:
      description: A group contains user resources.
      allOf:
        - $ref: "#/components/schemas/v3.Resource"
        - type: object
          properties:
            changed:
              description: ISO 8601 timestamp when the resource was changed.
              type: string
            name:
              description: Group name.
              type: string
            namespace:
              description: User namespace.
              type: string
            member:
              description: Array of user id's.
              type: array
              items:
                type: string
    Nodes:
      description: A list of nodes.
      allOf:
        - $ref: "#/components/schemas/v3.ResourceList"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Node.v3"
    NodeMeta:
      description: Node meta data.
      type: object
      properties:
        tags:
          description: Node tags. Tags can be freely choosen.
          type: array
          items:
            type: string
        author:
          description: Author.
          type: string
        license:
          description: Content license.
          type: string
        color:
          description: A color tag.
          type: string
    Node:
      description: A Node.
      allOf:
        - $ref: "#/components/schemas/v3.Resource"
        - type: object
          properties:
            changed:
              description: ISO 8601 timestamp when the resource was changed.
              type: string
            name:
              description: Node name.
              type: string
            mime:
              description: Mimetype.
              type: string
            readonly:
              description: Readonly only affects the content of the node but not metadata.
              type: boolean
              default: false
            directory:
              description: If node is of type Collection this flag is true.
              type: boolean
              default: false
            meta:
              $ref: "#/components/schemas/Node.v3Meta"
            size:
              description: The size in bytes. If the node is of type collection the size is
                the number of child nodes.
              type: number
              default: 0
            path:
              description: The path abstraction of the node.
              type: string
            access:
              description: Access level.
              type: string
              default: rw
              enum:
                - rw
                - w
                - m
                - w+
            parent:
              description: Points to the parent collection. If the nodes is in the root
                this is null.
              type: object
              properties:
                id:
                  description: The id of the parent collection
                  type: string
                name:
                  description: The name of the parent collection
                  type: string
            share:
              description: Points to the shared node (or share reference). If the node is
                not part of any share this is null.
              type: object
              properties:
                id:
                  description: The id of the share collection. If the share is a reference
                    (incoming share) it will point to the share reference and
                    not the id of the shared collection itself.
                  type: string
                name:
                  description: The name of the share (or share reference).
                  type: string
            shareowner:
              description: Points to the share owner. If the node is not part of any share
                this is null.
              type: object
              properties:
                id:
                  description: The id of the share owner.
                  type: string
                name:
                  description: The username of the share owner.
                  type: string
            subscription:
              description: Is true if the user has an active subscription on this node.
              type: boolean
              default: false
            subscription_exclude_me:
              description: Subscription excludes actions from the subscribed user itself.
              type: boolean
              default: false
            sharelink_has_password:
              description: Is true if the node has a protected public sharelink.
              type: boolean
              default: false
    Collections:
      description: A list of collections.
      allOf:
        - $ref: "#/components/schemas/v3.ResourceList"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/v3.Collection"
    Collection:
      description: A collection can hold an unlimited number of child nodes.
      allOf:
        - $ref: "#/components/schemas/Node.v3"
    Files:
      description: A list of files.
      allOf:
        - $ref: "#/components/schemas/v3.ResourceList"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/v3.File"
    File:
      description: A collection can hold an unlimited number of child nodes.
      allOf:
        - $ref: "#/components/schemas/Node.v3"
        - type: object
          properties:
            version:
              description: The content version. Does increase if the content gets changed.
              type: number
              default: 1
            hash:
              description: MD5 content checksum.
              type: string
            preview:
              description: Is true if there is a preview
              type: boolean
              default: false
    FileHistory:
      description: File history.
      type: object
      properties:
        version:
          description: The version number.
          type: number
          default: 1
        changed:
          description: ISO 8601 timestamp when the resource was changed.
          type: string
        type:
          description: Type of change.
          type: number
        user:
          description: Resolves to user who executed the operation.
          type: object
          properties:
            id:
              description: The id of the share owner.
              type: string
            name:
              description: The username of the share owner.
              type: string
    Delta:
      description: The delta is a differential feed to get changes since the last delta
        call.
      type: object
      properties:
        reset:
          description: If true the client needs to reset its state.
          type: boolean
          default: false
        cursor:
          description: ACL rules.
          type: string
        has_more:
          description: If true the server has more entries and the client must send another
            request with the latest cursor.
          type: boolean
          default: false
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/Node.v3"
    Share:
      description: Node share.
      type: object
      properties:
        share_name:
          description: The name of the share. By default the name of the node.
          type: string
        acl:
          description: ACL rules.
          type: array
          items:
            $ref: "#/components/schemas/v3.AclRule"
    AclRule:
      description: ACL rule.
      type: object
      properties:
        type:
          description: The type of the resource.
          type: string
          enum:
            - user
            - group
        id:
          description: ACL rules.
          type: string
        privilege:
          description: Privilege.
          type: string
          enum:
            - rw
            - w
            - m
            - w+
            - d
        role:
          description: Points to the share owner. If the node is not part of any share this
            is null.
          type: object
          properties:
            id:
              description: The id of the role resource.
              type: string
            name:
              description: The name of role resource.
              type: string
    UserNodeAttributeSummary:
      description: Request node fiel statistics.
      type: object
      additionalProperties:
        type: array
        items:
          type: object
          properties:
            _id:
              type: string
            sum:
              type: number
    ChunkSession:
      description: Chunking upload session.
      type: object
      properties:
        session:
          description: The upload session id
          type: string
        chunks_left:
          description: Tells how many chunks are left to upload.
          type: number
    EventLogs:
      description: A list of events.
      allOf:
        - $ref: "#/components/schemas/v3.ResourceList"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/v3.EventLog"
    EventLog:
      description: Event log entry. Each event represents an executed operation on the
        server.
      type: object
      properties:
        event:
          description: The event id.
          type: string
        timestamp:
          description: ISO 8601 timestamp when the event was created.
          type: string
        operation:
          description: The event operation.
          type: string
          enum:
            - deleteCollectionReference
            - deleteCollectionShare
            - deleteCollection
            - addCollection
            - addFile
            - addCollectionShare
            - addCollectionReference
            - undeleteFile
            - undeleteCollectionReference
            - undeleteCollectionShare
            - restoreFile
            - renameFile
            - renameCollection
            - renameCollectionShare
            - renameCollectionReference
            - copyFile
            - copyCollection
            - copyCollectionShare
            - copyCollectionRFeference
            - moveFile
            - moveCollection
            - moveCollectionReference
            - moveCollectionShare
        node:
          description: Resolves to the node involved in the operation.
          type: object
          properties:
            id:
              description: The id of the node
              type: string
            name:
              description: The name of the node
              type: string
        parent:
          description: Points to the parent collection. If the node is in the root this is
            null.
          type: object
          properties:
            id:
              description: The id of the parent collection
              type: string
            name:
              description: The name of the parent collection
              type: string
        share:
          description: Points to the shared node (or share reference). If the node is not
            part of any share this is null.
          type: object
          properties:
            id:
              description: The id of the share collection. If the share is a reference
                (incoming share) it will point to the share reference and not
                the id of the shared collection itself.
              type: string
            name:
              description: The name of the share (or share reference).
              type: string
        user:
          description: Resolves to user who executed the operation.
          type: object
          properties:
            id:
              description: The id of the share owner.
              type: string
            name:
              description: The username of the share owner.
              type: string
        client:
          description: Describes the client from which the operation was executed.
          type: object
          properties:
            type:
              description: The type of the client.
              type: string
            app:
              description: The client app name.
              type: string
            v:
              description: The version of the client app.
              type: string
            hostname:
              description: The hostname of the client.
              type: string
    Balloon.App.Office.Session:
      description: Office session
      type: object
      properties:
        id:
          description: Session id
          type: string
        wopi_url:
          description: WOPI url
          type: string
        access_token:
          description: Access token (time limited)
          type: string
        access_token_ttl:
          description: Token life time
          type: number
    Balloon.App.Office.Document:
      description: Office document
      type: object
      properties:
        loleaflet:
          type: string
        sessions:
          type: array
          items:
            type: object
    Balloon.App.Office.WopiDocument:
      description: WOPI document
        https://wopi.readthedocs.io/projects/wopirest/en/latest/files/CheckFileInfo.html
      type: object
      properties:
        BaseFileName:
          type: string
        Size:
          type: string
        Version:
          type: string
        OwnerId:
          type: string
        UserId:
          type: string
        UserFriendlyName:
          type: string
        UserCanWrite:
          type: boolean
        PostMessageOrigin:
          type: string
    Balloon.App.Notfification.Mail:
      description: Mail
      type: object
      properties:
        receiver:
          type: array
          items:
            type: string
            format: mail
        subject:
          type: string
        body:
          type: string
    Balloon.App.Notfification.Notifications:
      description: A list of notifications.
      allOf:
        - $ref: "#/components/schemas/v3.ResourceList"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/v3.Balloon.App.Notfification.Notification"
    Balloon.App.Notfification.Notification:
      description: A notification
      allOf:
        - $ref: "#/components/schemas/v3.Resource"
        - type: object
          properties:
            locale:
              description: Notification locale. A locale contains a static message which is
                of a given locale.
              type: string
              default: en_US
            subject:
              description: Subject.
              type: string
            message:
              description: Message.
              type: string
            sender:
              description: Points to the message. If there is no sender (For example the
                message came from the system itself) this is null.
              type: object
              properties:
                id:
                  description: The id of the sender.
                  type: string
                name:
                  description: The username of the sender.
                  type: string
            node:
              description: A notification may point to a node. If there is no node given
                this is null.
              type: object
              properties:
                id:
                  description: The id of the node.
                  type: string
                name:
                  description: The name of the node.
                  type: string
    Balloon.App.Convert.Slaves:
      description: A list of convert slaves.
      allOf:
        - $ref: "#/components/schemas/v3.ResourceList"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/v3.Balloon.App.Convert.Slave"
    Balloon.App.Convert.Slave:
      description: A convert slave
      allOf:
        - $ref: "#/components/schemas/v3.Resource"
        - type: object
          properties:
            format:
              description: Slave format.
              type: string
            master:
              description: Master node from which the slave is from.
              type: object
              properties:
                id:
                  description: The id of the node.
                  type: string
                name:
                  description: The name of the node.
                  type: string
            slave:
              description: The generated slave node. As long as the slave has not yet been
                created this is null.
              type: object
              properties:
                id:
                  description: The id of the node.
                  type: string
                name:
                  description: The name of the node.
                  type: string

