basePath: /
definitions:
  JsonPatch:
    description: A JSON Patch according rfc6902.
    items:
      $ref: '#/definitions/JsonPatchOperation'
    type: array
  JsonPatchOperation:
    description: A JSON Patch according rfc6902.
    properties:
      op:
        type: string
      path:
        type: string
      value:
        description: May be anyting
    type: object
  convert.v3.Slave:
    allOf:
    - $ref: '#/definitions/core.v3.Resource'
    - properties:
        format:
          description: Slave format.
          type: string
        master:
          description: Master node from which the slave is from.
          properties:
            id:
              description: The id of the node.
              type: string
            name:
              description: The name of the node.
              type: string
          type: object
        slave:
          description: The generated slave node. As long as the slave has not yet
            been created this is null.
          properties:
            id:
              description: The id of the node.
              type: string
            name:
              description: The name of the node.
              type: string
          type: object
      type: object
    description: A convert slave
  convert.v3.Slaves:
    allOf:
    - $ref: '#/definitions/core.v3.ResourceList'
    - properties:
        data:
          items:
            $ref: '#/definitions/convert.v3.Slave'
          type: array
      type: object
    description: A list of convert slaves.
  core.v3.AccessRole:
    allOf:
    - $ref: '#/definitions/core.v3.Resource'
    - properties:
        name:
          description: Unique role name
          type: string
        selectors:
          description: A list of user identifiers which the access role should match.
            It is also possible to specify a wildcard to match all identifiers.
          items:
            type: string
          type: array
      type: object
    description: An access role is defined list which matches authenticated user identifiers.
  core.v3.AccessRoles:
    allOf:
    - $ref: '#/definitions/core.v3.ResourceList'
    - properties:
        data:
          items:
            $ref: '#/definitions/core.v3.AccessRole'
          type: array
      type: object
    description: A list of access roles.
  core.v3.AccessRule:
    allOf:
    - $ref: '#/definitions/core.v3.Resource'
    - properties:
        name:
          description: Unique rule name
          type: string
        rules:
          items:
            $ref: '#/definitions/core.v3.AccessRuleDefinition'
          type: array
      type: object
    description: An access rule allows to specify what access roles can access which
      resources.
  core.v3.AccessRuleDefinition:
    description: Each access rule may hold multiple rules.
    properties:
      fields:
        description: A list of accessible fields of a resource. Might contain `*`
          to include all fields.
        items:
          type: string
        type: array
      match:
        description: The resource value to match. Might be `*` to match any.
        items:
          type: string
        type: array
      roles:
        description: A list of access-role names to match the given rule.
        items:
          type: string
        type: array
      selector:
        description: The resource type (attribute) to select. Might be `*` to select
          any.
        items:
          type: string
        type: array
      verbs:
        description: List of allowed HTTP rfc7231 verbs, you may also specify a wildcard
          to match all verbs.
        items:
          enum:
          - '*'
          - GET
          - POST
          - PUT
          - PATCH
          - DELETE
          - HEAD
          type: string
        type: array
    type: object
  core.v3.AccessRules:
    allOf:
    - $ref: '#/definitions/core.v3.ResourceList'
    - properties:
        data:
          items:
            $ref: '#/definitions/core.v3.AccessRule'
          type: array
      type: object
    description: A list of access rules.
  core.v3.AclRule:
    description: ACL rule.
    properties:
      id:
        description: ACL rules.
        type: string
      privilege:
        description: Privilege.
        enum:
        - rw
        - w
        - m
        - rp
        - d
        type: string
      role:
        description: Points to the share owner. If the node is not part of any share
          this is null.
        properties:
          id:
            description: The id of the role resource.
            type: string
          name:
            description: The name of role resource.
            type: string
        type: object
      type:
        description: The type of the resource.
        enum:
        - user
        - group
        type: string
    type: object
  core.v3.ApiRoot:
    description: Describes the api root.
    properties:
      api:
        type: integer
      name:
        type: string
    type: object
  core.v3.Collection:
    allOf:
    - $ref: '#/definitions/core.v3.Node'
    description: A collection can hold an unlimited number of child nodes.
  core.v3.Collections:
    allOf:
    - $ref: '#/definitions/core.v3.ResourceList'
    - properties:
        data:
          items:
            $ref: '#/definitions/core.v3.Collection'
          type: array
      type: object
    description: A list of collections.
  core.v3.EmbeddedResources:
    additionalProperties:
      $ref: '#/definitions/core.v3.Resource'
  core.v3.Error:
    description: Error definiton.
    properties:
      code:
        type: integer
      error:
        type: string
      message:
        type: string
    type: object
  core.v3.Event:
    description: Event log entry. Each event represents an executed operation on the
      server.
    properties:
      client:
        description: Describes the client from which the operation was executed.
        properties:
          app:
            description: The client app name.
            type: string
          hostname:
            description: The hostname of the client.
            type: string
          type:
            description: The type of the client.
            type: string
          v:
            description: The version of the client app.
            type: string
        type: object
      event:
        description: The event id.
        type: string
      node:
        description: Resolves to the node involved in the operation.
        properties:
          id:
            description: The id of the node
            type: string
          name:
            description: The name of the node
            type: string
        type: object
      operation:
        description: The event operation.
        enum:
        - deleteCollectionReference
        - deleteCollectionShare
        - deleteCollection
        - addCollection
        - addFile
        - addCollectionShare
        - addCollectionReference
        - undeleteFile
        - undeleteCollectionReference
        - undeleteCollectionShare
        - restoreFile
        - renameFile
        - renameCollection
        - renameCollectionShare
        - renameCollectionReference
        - copyFile
        - copyCollection
        - copyCollectionShare
        - copyCollectionRFeference
        - moveFile
        - moveCollection
        - moveCollectionReference
        - moveCollectionShare
        type: string
      parent:
        description: Points to the parent collection. If the node is in the root this
          is null.
        properties:
          id:
            description: The id of the parent collection
            type: string
          name:
            description: The name of the parent collection
            type: string
        type: object
      share:
        description: Points to the shared node (or share reference). If the node is
          not part of any share this is null.
        properties:
          id:
            description: The id of the share collection. If the share is a reference
              (incoming share) it will point to the share reference and not the id
              of the shared collection itself.
            type: string
          name:
            description: The name of the share (or share reference).
            type: string
        type: object
      timestamp:
        description: ISO 8601 timestamp when the event was created.
        type: string
      user:
        description: Resolves to user who executed the operation.
        properties:
          id:
            description: The id of the share owner.
            type: string
          name:
            description: The username of the share owner.
            type: string
        type: object
    type: object
  core.v3.Events:
    allOf:
    - $ref: '#/definitions/core.v3.ResourceList'
    - properties:
        data:
          items:
            $ref: '#/definitions/core.v3.Event'
          type: array
      type: object
    description: A list of events.
  core.v3.File:
    allOf:
    - $ref: '#/definitions/core.v3.Node'
    - properties:
        hash:
          description: MD5 content checksum.
          type: string
        preview:
          description: Is true if there is a preview
          type: boolean
        version:
          default: 1
          description: The content version. Does increase if the content gets changed.
          type: integer
      type: object
    description: A collection can hold an unlimited number of child nodes.
  core.v3.FileHistory:
    description: File history.
    properties:
      changed:
        description: ISO 8601 timestamp when the resource was changed.
        format: date-time
        type: string
      type:
        description: Type of change.
        type: integer
      user:
        description: Resolves to user who executed the operation.
        properties:
          id:
            description: The id of the share owner.
            type: string
          name:
            description: The username of the share owner.
            type: string
        type: object
      version:
        default: 1
        description: The version number.
        type: integer
    type: object
  core.v3.Files:
    allOf:
    - $ref: '#/definitions/core.v3.ResourceList'
    - properties:
        data:
          items:
            $ref: '#/definitions/core.v3.File'
          type: array
      type: object
    description: A list of files.
  core.v3.Group:
    allOf:
    - $ref: '#/definitions/core.v3.Resource'
    - properties:
        members:
          description: Array of user id's.
          items:
            type: string
          type: array
        name:
          description: Group name.
          type: string
        namespace:
          description: User namespace.
          type: string
      type: object
    description: A group contains user resources.
  core.v3.Groups:
    allOf:
    - $ref: '#/definitions/core.v3.ResourceList'
    - properties:
        data:
          items:
            $ref: '#/definitions/core.v3.Group'
          type: array
      type: object
    description: A list of groups.
  core.v3.Link:
    description: A http URI pointing to another resource
    properties:
      href:
        type: string
    type: object
  core.v3.Links:
    description: Contains resource links (URL) to other resources.
    properties:
      self:
        $ref: '#/definitions/core.v3.Link'
    type: object
  core.v3.ListLinks:
    properties:
      next:
        $ref: '#/definitions/core.v3.Link'
      prev:
        $ref: '#/definitions/core.v3.Link'
      self:
        $ref: '#/definitions/core.v3.Link'
    type: object
  core.v3.Metadata:
    description: Generic resource metadata
    properties:
      annotations:
        additionalProperties:
          type: string
        description: Annotations is an unstructured key value map stored with a resource
          that may be set by external tools to store and retrieve arbitrary metadata.
        type: object
      changed:
        description: ISO 8601 timestamp when the resource was created.
        format: date-time
        type: string
      created:
        description: ISO 8601 timestamp when the resource was created.
        format: date-time
        type: string
      id:
        description: Unique 12-byte resource identifier. Note this is a MongoDB ObjectId.
          The id only useful to verify that a given resource was completely recreated.
          An ID is immutable and will be created on the server.
        type: string
      version:
        description: Numeric resource version.
        type: integer
    type: object
  core.v3.Node:
    allOf:
    - $ref: '#/definitions/core.v3.Resource'
    - properties:
        access:
          default: rw
          description: Access level.
          enum:
          - rw
          - w
          - m
          - rp
          type: string
        changed:
          description: ISO 8601 timestamp when the resource was created.
          format: date-time
          type: string
        created:
          description: ISO 8601 timestamp when the resource was created.
          format: date-time
          type: string
        deleted:
          description: ISO 8601 timestamp when the resource was deleted.
          format: date-time
          type:
          - string
          - "null"
        destroy:
          description: ISO 8601 timestamp when the resource will be automatically
            destroyed.
          format: date-time
          type:
          - string
          - "null"
        directory:
          default: false
          description: If node is of type Collection this flag is true.
          type: boolean
        lock:
          type: "null"
        mime:
          description: Mimetype.
          type: string
        name:
          description: Node name.
          type: string
        owner:
          description: .
          properties:
            id:
              description: The id of the share owner.
              type: string
            name:
              description: The username of the share owner.
              type: string
          type:
          - object
          - "null"
        parent:
          description: Points to the parent collection. If the nodes is in the root
            this is null.
          type:
          - string
          - "null"
        path:
          description: The path abstraction of the node.
          type: string
        readonly:
          default: false
          description: Readonly only affects the content of the node but not metadata.
          type: boolean
        share:
          description: Points to the shared node (or share reference). If the node
            is not part of any share this is null.
          properties:
            id:
              description: The id of the share collection. If the share is a reference
                (incoming share) it will point to the share reference and not the
                id of the shared collection itself.
              type: string
            name:
              description: The name of the share (or share reference).
              type: string
          type:
          - object
          - "null"
        sharelink_has_password:
          default: false
          description: Is true if the node has a protected public sharelink.
          type: boolean
        sharename:
          type:
          - string
          - "null"
        shareowner:
          description: Points to the share owner. If the node is not part of any share
            this is null.
          type:
          - string
          - "null"
        size:
          default: 0
          description: The size in bytes. If the node is of type collection the size
            is the number of child nodes.
          type: integer
        subscription:
          default: false
          description: Is true if the user has an active subscription on this node.
          type: boolean
        subscription_exclude_me:
          default: false
          description: Subscription excludes actions from the subscribed user itself.
          type: boolean
      type: object
    description: A Node.
  core.v3.Nodes:
    allOf:
    - $ref: '#/definitions/core.v3.ResourceList'
    - properties:
        data:
          items:
            $ref: '#/definitions/core.v3.Node'
          type: array
      type: object
    description: A list of nodes.
  core.v3.Process:
    allOf:
    - $ref: '#/definitions/core.v3.Resource'
    - properties:
        node:
          description: Points to the related node.
          type: string
        owner:
          description: Process owner
          type: string
        status:
          description: Holds the status of the process.
          properties:
            code:
              description: The result code of the process.
              type: number
          type: object
      type: object
    description: A session defines a temporary, resumable upload session.
  core.v3.Processes:
    allOf:
    - $ref: '#/definitions/core.v3.ResourceList'
    - properties:
        data:
          items:
            $ref: '#/definitions/core.v3.Process'
          type: array
      type: object
    description: A server process.
    type: object
  core.v3.Resource:
    properties:
      embedded:
        $ref: '#/definitions/core.v3.EmbeddedResources'
      kind:
        description: Resource type
        type: string
      links:
        $ref: '#/definitions/core.v3.Links'
      metadata:
        $ref: '#/definitions/core.v3.Metadata'
    type: object
  core.v3.ResourceList:
    description: A readonly list of resources.
    properties:
      count:
        description: Holds the number of items in the current list response.
        type: integer
      kind:
        default: List
        description: The resource type, always List.
        type: string
      links:
        $ref: '#/definitions/core.v3.ListLinks'
        description: Holds a list of links rfc1738 to other resources.
      total:
        description: Holds the number of total available items on the server. Note
          that a List resource is always paged. You need to traverse with offset and
          limit to request further resources in the list.
        type: integer
    type: object
  core.v3.Session:
    allOf:
    - $ref: '#/definitions/core.v3.Resource'
    - properties:
        hash:
          description: MD5 has of the uploaded content.
          type: string
        size:
          default: 0
          description: The size of the uploaded content.
          type: integer
      type: object
    description: A session defines a temporary, resumable upload session.
  core.v3.Sessions:
    allOf:
    - $ref: '#/definitions/core.v3.ResourceList'
    - properties:
        data:
          items:
            $ref: '#/definitions/core.v3.Session'
          type: array
      type: object
    description: A list of upload sessions.
    type: object
  core.v3.Share:
    description: Node share.
    properties:
      acl:
        description: ACL rules.
        items:
          $ref: '#/definitions/core.v3.AclRule'
        type: array
      share_name:
        description: The name of the share. By default the name of the node.
        type: string
    type: object
  core.v3.User:
    allOf:
    - $ref: '#/definitions/core.v3.Resource'
    - properties:
        admin:
          default: false
          description: Admin user flag.
          type: boolean
        auth:
          default: internal
          description: Authentication source.
          enum:
          - internal
          - external
          type: string
        available:
          default: -1
          description: Available storage in bytes. Is -1 if there is no hard_quota.
          type: integer
        hard_quota:
          default: -1
          description: Hard quota in bytes (Max. limit of storage usage). Note that
            external storage is not part of the quota. The default is no limit.
          type: integer
        has_password:
          default: false
          description: Is true if the user has a local password set.
          type: boolean
        locale:
          default: en_US
          description: User locale.
          type: string
        name:
          description: Display name (Usuallly same as username).
          type: string
        namespace:
          description: User namespace.
          type: string
        soft_quota:
          default: -1
          description: Soft quota in bytes (Warning of high quota usage). The default
            is no limit.
          type: integer
        used:
          default: 0
          description: Used storage in bytes.
          type: integer
        username:
          description: Unique username.
          type: string
      type: object
    description: A user is used to access the server.
  core.v3.Users:
    allOf:
    - $ref: '#/definitions/core.v3.ResourceList'
    - properties:
        data:
          items:
            $ref: '#/definitions/core.v3.User'
          type: array
      type: object
    description: A list of users.
    type: object
  notification.v3.Mail:
    description: Mail
    properties:
      body:
        type: string
      receiver:
        items:
          format: mail
          type: string
        type: array
      subject:
        type: string
    type: object
  notification.v3.Notification:
    allOf:
    - $ref: '#/definitions/core.v3.Resource'
    - properties:
        locale:
          default: en_US
          description: Notification locale. A locale contains a static message which
            is of a given locale.
          type: string
        message:
          description: Message.
          type: string
        node:
          description: A notification may point to a node. If there is no node given
            this is null.
          properties:
            id:
              description: The id of the node.
              type: string
            name:
              description: The name of the node.
              type: string
          type: object
        sender:
          description: Points to the message. If there is no sender (For example the
            message came from the system itself) this is null.
          properties:
            id:
              description: The id of the sender.
              type: string
            name:
              description: The username of the sender.
              type: string
          type: object
        subject:
          description: Subject.
          type: string
      type: object
    description: A notification
  notification.v3.Notifications:
    allOf:
    - $ref: '#/definitions/core.v3.ResourceList'
    - properties:
        data:
          items:
            $ref: '#/definitions/notification.v3.Notification'
          type: array
      type: object
    description: A list of notifications.
  oidc.OAuth2Token:
    description: OAUTH2 access token response according RFC6749 https://tools.ietf.org/html/rfc6749#section-4.3.3
    properties:
      access_token:
        description: Resource access_token.
        type: string
      expires_in:
        default: 3600
        description: The number of seconds the issues acceess_token is valid for.
          This is usually 1hour.
        type: integer
      refresh_token:
        description: An optional refresh token to get new access_tokens via the refresh_token
          grant type.
        type: string
      scope:
        description: The scopes.
        type: string
      token_type:
        default: Bearer
        description: The type of token. This is usually a Bearer token.
        type: string
    type: object
info:
  description: balloon API
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: balloon API
  version: 1.0.0
paths:
  /api/v3:
    get:
      operationId: getCoreV3CoreV3Api
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: API root
          schema:
            $ref: '#/definitions/core.v3.ApiRoot'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      security: []
      summary: Get server status
      tags:
      - core.v3
  /api/v3/access-roles:
    get:
      description: A access-role is a colletion of users
      operationId: getCoreV3CoreV3AccessRoles
      parameters:
      - description: 'Specify a MongoDB based resource query (https://docs.mongodb.com/manual/tutorial/query-documents)
          using JSON (For example: {"name": {$regex: ''foo.*''}}).'
        in: query
        name: query
        required: false
        type: string
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      - description: Objects offset, per default it starts from 0. You may also request
          a negative offset which will return results from the end [total - offset].
        in: query
        name: offset
        required: false
        type: integer
      - description: Objects limit, per default 20 objects will get returned
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Specify a MongoDB sort operation (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
          using JSON (For example: {"name": -1}).'
        in: query
        name: sort
        required: false
        type: string
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: List of access-roles
          schema:
            $ref: '#/definitions/core.v3.AccessRoles'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get access-roles
      tags:
      - core.v3
    post:
      operationId: addCoreV3AccessRole
      parameters:
      - in: body
        name: data
        schema:
          $ref: '#/definitions/core.v3.AccessRole'
      produces:
      - application/json; charset=UTF-8
      responses:
        201:
          description: If successful the server will respond with 201 Created
          schema:
            $ref: '#/definitions/core.v3.AccessRole'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Add access-role
      tags:
      - core.v3
  /api/v3/access-roles/{accessRole}:
    delete:
      operationId: deleteCoreV3AccessRole
      parameters:
      - description: Resource identifier
        in: path
        name: accessRole
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      produces:
      - application/json; charset=UTF-8
      responses:
        204:
          description: If successful the server will respond with 204 No Content
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Delete access-role
      tags:
      - core.v3
    get:
      operationId: getCoreV3AccessRole
      parameters:
      - description: Resource identifier
        in: path
        name: accessRole
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: AccessRole
          schema:
            $ref: '#/definitions/core.v3.AccessRole'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get access-role
      tags:
      - core.v3
    patch:
      consumes:
      - application/json; charset=UTF-8-patch+json
      operationId: patchCoreV3AccessRole
      parameters:
      - description: Resource identifier
        in: path
        name: accessRole
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: Set attributes for access-role
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/JsonPatch'
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: AccessRole
          schema:
            $ref: '#/definitions/core.v3.AccessRole'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Change access-role
      tags:
      - core.v3
  /api/v3/access-rules:
    get:
      description: A access-rule is a colletion of users
      operationId: getCoreV3CoreV3AccessRules
      parameters:
      - description: 'Specify a MongoDB based resource query (https://docs.mongodb.com/manual/tutorial/query-documents)
          using JSON (For example: {"name": {$regex: ''foo.*''}}).'
        in: query
        name: query
        required: false
        type: string
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      - description: Objects offset, per default it starts from 0. You may also request
          a negative offset which will return results from the end [total - offset].
        in: query
        name: offset
        required: false
        type: integer
      - description: Objects limit, per default 20 objects will get returned
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Specify a MongoDB sort operation (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
          using JSON (For example: {"name": -1}).'
        in: query
        name: sort
        required: false
        type: string
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: List of access-rules
          schema:
            $ref: '#/definitions/core.v3.AccessRules'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get access-rules
      tags:
      - core.v3
    post:
      operationId: addCoreV3AccessRule
      parameters:
      - in: body
        name: data
        schema:
          $ref: '#/definitions/core.v3.AccessRule'
      produces:
      - application/json; charset=UTF-8
      responses:
        201:
          description: If successful the server will respond with 201 Created
          schema:
            $ref: '#/definitions/core.v3.AccessRule'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Add access-rule
      tags:
      - core.v3
  /api/v3/access-rules/{accessRule}:
    delete:
      operationId: deleteCoreV3AccessRule
      parameters:
      - description: Resource identifier
        in: path
        name: accessRule
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      produces:
      - application/json; charset=UTF-8
      responses:
        204:
          description: If successful the server will respond with 204 No Content
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Delete access-rule
      tags:
      - core.v3
    get:
      operationId: getCoreV3AccessRule
      parameters:
      - description: Resource identifier
        in: path
        name: accessRule
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: AccessRule
          schema:
            $ref: '#/definitions/core.v3.AccessRule'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get access-rule
      tags:
      - core.v3
    patch:
      consumes:
      - application/json; charset=UTF-8-patch+json
      operationId: patchCoreV3AccessRule
      parameters:
      - description: Resource identifier
        in: path
        name: accessRule
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: Set attributes for access-rule
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/JsonPatch'
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: AccessRule
          schema:
            $ref: '#/definitions/core.v3.AccessRule'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Change access-rule
      tags:
      - core.v3
  /api/v3/collections:
    get:
      operationId: getCoreV3Collections
      parameters:
      - description: 'Specify a MongoDB based resource query (https://docs.mongodb.com/manual/tutorial/query-documents)
          using JSON (For example: {"name": {$regex: ''foo.*''}}).'
        in: query
        name: query
        required: false
        type: string
      - description: Wheter to include deleted or not
        enum:
        - 0
        - 1
        - 2
        in: query
        name: deleted
        required: false
        type: integer
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      - description: Objects offset, per default it starts from 0. You may also request
          a negative offset which will return results from the end [total - offset].
        in: query
        name: offset
        required: false
        type: integer
      - description: Objects limit, per default 20 objects will get returned
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Specify a MongoDB sort operation (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
          using JSON (For example: {"name": -1}).'
        in: query
        name: sort
        required: false
        type: string
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: List of collections
          schema:
            $ref: '#/definitions/core.v3.Collections'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get collections
      tags:
      - core.v3
  /api/v3/collections/{collection}/children:
    get:
      operationId: getCoreV3Children
      parameters:
      - description: Parent collection
        in: path
        name: collection
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: 'Specify a MongoDB based resource query (https://docs.mongodb.com/manual/tutorial/query-documents)
          using JSON (For example: {"name": {$regex: ''foo.*''}}).'
        in: query
        name: query
        required: false
        type: string
      - description: Wheter to include deleted or not
        enum:
        - 0
        - 1
        - 2
        in: query
        name: deleted
        required: false
        type: integer
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      - description: Objects offset, per default it starts from 0. You may also request
          a negative offset which will return results from the end [total - offset].
        in: query
        name: offset
        required: false
        type: integer
      - description: Objects limit, per default 20 objects will get returned
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Specify a MongoDB sort operation (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
          using JSON (For example: {"name": -1}).'
        in: query
        name: sort
        required: false
        type: string
      - default: false
        description: Include children recursively.
        in: query
        name: recursive
        required: false
        type: boolean
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: List of children
          schema:
            $ref: '#/definitions/core.v3.Nodes'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get collection children
      tags:
      - core.v3
  /api/v3/collections/children:
    get:
      operationId: getCoreV3RootChildren
      parameters:
      - description: 'Specify a MongoDB based resource query (https://docs.mongodb.com/manual/tutorial/query-documents)
          using JSON (For example: {"name": {$regex: ''foo.*''}}).'
        in: query
        name: query
        required: false
        type: string
      - description: Wheter to include deleted or not
        enum:
        - 0
        - 1
        - 2
        in: query
        name: deleted
        required: false
        type: integer
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      - description: Objects offset, per default it starts from 0. You may also request
          a negative offset which will return results from the end [total - offset].
        in: query
        name: offset
        required: false
        type: integer
      - description: Objects limit, per default 20 objects will get returned
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Specify a MongoDB sort operation (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
          using JSON (For example: {"name": -1}).'
        in: query
        name: sort
        required: false
        type: string
      - default: false
        description: Include children recursively.
        in: query
        name: recursive
        required: false
        type: boolean
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: List of children
          schema:
            $ref: '#/definitions/core.v3.Nodes'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get root children
      tags:
      - core.v3
  /api/v3/desktop-clients/{format}/content:
    get:
      operationId: getCoreV3DesktopClient
      parameters:
      - description: Request client foramt (deb, rpm, exe, pkg, zip or a custom format)
        enum:
        - deb
        - rpm
        - exe
        - pkg
        - zip
        in: path
        name: format
        required: true
        type: string
      produces:
      - octet/stream
      responses:
        200:
          description: Desktop client (binary)
          schema:
            type: file
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Download balloon desktop client
      tags:
      - desktopclient.v3
  /api/v3/events:
    get:
      description: Get events containing all operations which are made by the user
        himself or share members
      operationId: getCoreV3Events
      parameters:
      - description: 'Specify a MongoDB based resource query (https://docs.mongodb.com/manual/tutorial/query-documents)
          using JSON (For example: {"name": {$regex: ''foo.*''}}).'
        in: query
        name: query
        required: false
        type: string
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      - description: Objects offset, per default it starts from 0. You may also request
          a negative offset which will return results from the end [total - offset].
        in: query
        name: offset
        required: false
        type: integer
      - description: Objects limit, per default 20 objects will get returned
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Specify a MongoDB sort operation (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
          using JSON (For example: {"name": -1}).'
        in: query
        name: sort
        required: false
        type: string
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: Event log
          schema:
            $ref: '#/definitions/core.v3.Events'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get events
      tags:
      - core.v3
  /api/v3/events/{event}:
    get:
      description: Get event
      operationId: getCoreV3Event
      parameters:
      - description: Event identifier
        in: path
        name: event
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: Event
          schema:
            $ref: '#/definitions/core.v3.Event'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get events
      tags:
      - core.v3
  /api/v3/file/{file}/content:
    get:
      description: Stream file contents.
      operationId: getCoreV3Content
      parameters:
      - description: Node identifier
        in: path
        name: file
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: Read stream from a specific offset/limit in bytes.
        in: header
        name: Range
        required: false
        type: string
      - description: Can be set to base64 to encode content as base64.
        enum:
        - base64
        in: query
        name: encode
        required: false
        type: string
      - default: false
        description: 'Force download file (Content-Disposition: attachment HTTP header)'
        in: query
        name: download
        required: false
        type: boolean
      produces:
      - octet/stream
      responses:
        200:
          description: Content
          schema:
            type: file
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Download node content.
      tags:
      - core.v3
  /api/v3/files:
    get:
      operationId: getCoreV3Files
      parameters:
      - description: 'Specify a MongoDB based resource query (https://docs.mongodb.com/manual/tutorial/query-documents)
          using JSON (For example: {"name": {$regex: ''foo.*''}}).'
        in: query
        name: query
        required: false
        type: string
      - description: Wheter to include deleted or not
        enum:
        - 0
        - 1
        - 2
        in: query
        name: deleted
        required: false
        type: integer
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      - description: Objects offset, per default it starts from 0. You may also request
          a negative offset which will return results from the end [total - offset].
        in: query
        name: offset
        required: false
        type: integer
      - description: Objects limit, per default 20 objects will get returned
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Specify a MongoDB sort operation (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
          using JSON (For example: {"name": -1}).'
        in: query
        name: sort
        required: false
        type: string
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: List of files
          schema:
            $ref: '#/definitions/core.v3.Files'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get files
      tags:
      - core.v3
  /api/v3/files/{file}/convert/slaves:
    get:
      operationId: getCoreV3Slaves
      parameters:
      - description: File identifier
        in: path
        name: file
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: Slaves
          schema:
            $ref: '#/definitions/convert.v3.Slaves'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get convert slaves
      tags:
      - convert.v3
    post:
      consumes:
      - application/json; charset=UTF-8
      operationId: addCoreV3Slave
      parameters:
      - description: File identifier
        in: path
        name: file
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: 'Add new conversion slave '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/convert.v3.Slave'
      produces:
      - application/json; charset=UTF-8
      responses:
        202:
          description: Slave
          schema:
            $ref: '#/definitions/convert.v3.Slave'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Add convert slave
      tags:
      - convert.v3
  /api/v3/files/{file}/convert/slaves/{slave}:
    delete:
      consumes:
      - application/json; charset=UTF-8
      operationId: deleteCoreV3Slave
      parameters:
      - description: File identifier
        in: path
        name: file
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: Slave identifier
        in: path
        name: slave
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      produces:
      - application/json; charset=UTF-8
      responses:
        204:
          description: If successful the server will respond with 204 No Content
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Delete convert slave
      tags:
      - convert.v3
    get:
      operationId: getCoreV3Slave
      parameters:
      - description: File identifier
        in: path
        name: file
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: Slave identifier
        in: path
        name: slave
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: Slave
          schema:
            $ref: '#/definitions/convert.v3.Slave'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get convert slave
      tags:
      - convert.v3
  /api/v3/files/{file}/convert/supported-formats:
    get:
      description: Get supported file formats to convert to (formats do vary between
        files)
      operationId: getCoreV3SupportedFormats
      parameters:
      - description: File identifier
        in: path
        name: file
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: Formats
          schema:
            items:
              type: string
            type: array
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get supported convert file formats
      tags:
      - convert.v3
  /api/v3/files/{file}/history:
    get:
      operationId: getCoreV3FileHistory
      parameters:
      - description: File identifier
        in: path
        name: file
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: File history
          schema:
            $ref: '#/definitions/core.v3.FileHistory'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get file history
      tags:
      - core.v3
  /api/v3/files/{file}/preview:
    get:
      description: Get preview
      operationId: getCoreV3Preview
      parameters:
      - description: File identifier
        in: path
        name: file
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: Set to base64 to return a jpeg encoded preview as base64, else
          return it as jpeg binary
        in: query
        name: encode
        required: false
        type: string
      produces:
      - octet/stream
      responses:
        200:
          description: Binara data
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get a preview of the files content. The body either contains an encoded
        string or a jpeg binary.
      tags:
      - preview.v3
  /api/v3/groups:
    get:
      description: A group is a colletion of users
      operationId: getCoreV3CoreV3Groups
      parameters:
      - description: 'Specify a MongoDB based resource query (https://docs.mongodb.com/manual/tutorial/query-documents)
          using JSON (For example: {"name": {$regex: ''foo.*''}}).'
        in: query
        name: query
        required: false
        type: string
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      - description: Objects offset, per default it starts from 0. You may also request
          a negative offset which will return results from the end [total - offset].
        in: query
        name: offset
        required: false
        type: integer
      - description: Objects limit, per default 20 objects will get returned
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Specify a MongoDB sort operation (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
          using JSON (For example: {"name": -1}).'
        in: query
        name: sort
        required: false
        type: string
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: List of groups
          schema:
            $ref: '#/definitions/core.v3.Groups'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get groups
      tags:
      - core.v3
    post:
      operationId: addCoreV3Group
      parameters:
      - in: body
        name: data
        schema:
          $ref: '#/definitions/core.v3.Group'
      produces:
      - application/json; charset=UTF-8
      responses:
        201:
          description: If successful the server will respond with 201 Created
          schema:
            $ref: '#/definitions/core.v3.Group'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Add group
      tags:
      - core.v3
  /api/v3/groups/{group}:
    delete:
      operationId: deleteCoreV3Group
      parameters:
      - description: Resource identifier
        in: path
        name: group
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      produces:
      - application/json; charset=UTF-8
      responses:
        204:
          description: If successful the server will respond with 204 No Content
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Delete group
      tags:
      - core.v3
    get:
      operationId: getCoreV3Group
      parameters:
      - description: Resource identifier
        in: path
        name: group
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: Group
          schema:
            $ref: '#/definitions/core.v3.Group'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get group
      tags:
      - core.v3
    patch:
      consumes:
      - application/json; charset=UTF-8-patch+json
      operationId: patchCoreV3Group
      parameters:
      - description: Resource identifier
        in: path
        name: group
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: Set attributes for group
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/JsonPatch'
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: Group
          schema:
            $ref: '#/definitions/core.v3.Group'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Change group
      tags:
      - core.v3
  /api/v3/groups/{group}/members:
    get:
      operationId: getCoreV3GroupMembers
      parameters:
      - description: Resource identifier
        in: path
        name: group
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: List of users
          schema:
            $ref: '#/definitions/core.v3.Users'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get group members
      tags:
      - core.v3
  /api/v3/nodes:
    get:
      operationId: getCoreV3Nodes
      parameters:
      - description: 'Specify a MongoDB based resource query (https://docs.mongodb.com/manual/tutorial/query-documents)
          using JSON (For example: {"name": {$regex: ''foo.*''}}).'
        in: query
        name: query
        required: false
        type: string
      - description: Wheter to include deleted or not
        enum:
        - 0
        - 1
        - 2
        in: query
        name: deleted
        required: false
        type: integer
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      - description: Objects offset, per default it starts from 0. You may also request
          a negative offset which will return results from the end [total - offset].
        in: query
        name: offset
        required: false
        type: integer
      - description: Objects limit, per default 20 objects will get returned
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Specify a MongoDB sort operation (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
          using JSON (For example: {"name": -1}).'
        in: query
        name: sort
        required: false
        type: string
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: List of nodes
          schema:
            $ref: '#/definitions/core.v3.Nodes'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get all nodes
      tags:
      - core.v3
    post:
      consumes:
      - application/json; charset=UTF-8
      operationId: addCoreV3Node
      parameters:
      - description: 'Node '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/core.v3.Node'
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: Node
          schema:
            $ref: '#/definitions/core.v3.Node'
        202:
          description: 202 Status gets returned if the server needs to perform actions
            afterwards. The result is a core.v3.Process. The client may either long
            poll (watch stream), short poll or use the websocket api to listen for
            the process to be finished.
          schema:
            $ref: '#/definitions/core.v3.Process'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Add node
      tags:
      - core.v3
  /api/v3/nodes/{node}:
    delete:
      operationId: deleteCoreV3Node
      parameters:
      - description: Node identifier
        in: path
        name: node
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      responses:
        202:
          description: 202 Status gets returned if the server needs to perform actions
            afterwards. The result is a core.v3.Process. The client may either long
            poll (watch stream), short poll or use the websocket api to listen for
            the process to be finished.
          schema:
            $ref: '#/definitions/core.v3.Process'
        204:
          description: If successful the server will respond with 204 No Content
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Delete node
      tags:
      - core.v3
    get:
      operationId: getCoreV3Node
      parameters:
      - description: Node identifier
        in: path
        name: node
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: Node
          schema:
            $ref: '#/definitions/core.v3.Node'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get node
      tags:
      - core.v3
    patch:
      consumes:
      - application/json; charset=UTF-8-patch+json
      operationId: patchCoreV3Node
      parameters:
      - description: Node identifier
        in: path
        name: node
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: 'Change attributes '
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/JsonPatch'
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: Node
          schema:
            $ref: '#/definitions/core.v3.Node'
        202:
          description: 202 Status gets returned if the server needs to perform actions
            afterwards. The result is a core.v3.Process. The client may either long
            poll (watch stream), short poll or use the websocket api to listen for
            the process to be finished.
          schema:
            $ref: '#/definitions/core.v3.Process'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Change node
      tags:
      - core.v3
  /api/v3/nodes/{node}/events:
    get:
      description: Get event containing all operations which are made by the user
        or share members on a given node
      operationId: getCoreV3NodeEvents
      parameters:
      - description: Node identifier
        in: path
        name: node
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: 'Specify a MongoDB based resource query (https://docs.mongodb.com/manual/tutorial/query-documents)
          using JSON (For example: {"name": {$regex: ''foo.*''}}).'
        in: query
        name: query
        required: false
        type: string
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      - description: Objects offset, per default it starts from 0. You may also request
          a negative offset which will return results from the end [total - offset].
        in: query
        name: offset
        required: false
        type: integer
      - description: Objects limit, per default 20 objects will get returned
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Specify a MongoDB sort operation (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
          using JSON (For example: {"name": -1}).'
        in: query
        name: sort
        required: false
        type: string
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: Event log
          schema:
            $ref: '#/definitions/core.v3.Events'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get event
      tags:
      - core.v3
  /api/v3/nodes/{node}/parents:
    get:
      description: The hirarchy of all parent nodes is ordered in a single level array
        beginning with the collection on the highest level.
      operationId: getCoreV3ParentNodes
      parameters:
      - description: Node identifier
        in: path
        name: node
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      - description: Include requested collection itself at the end of the list (Will
          be ignored if the requested node is a file)
        in: query
        name: self
        required: false
        type: boolean
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: Parent nodes
          schema:
            $ref: '#/definitions/core.v3.Collections'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get parent collections
      tags:
      - core.v3
  /api/v3/nodes/{node}/processes:
    get:
      description: Get process containing all operations which are made by the user
        or share members on a given node
      operationId: getCoreV3NodeProcesses
      parameters:
      - description: Node identifier
        in: path
        name: node
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: 'Specify a MongoDB based resource query (https://docs.mongodb.com/manual/tutorial/query-documents)
          using JSON (For example: {"name": {$regex: ''foo.*''}}).'
        in: query
        name: query
        required: false
        type: string
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      - description: Objects offset, per default it starts from 0. You may also request
          a negative offset which will return results from the end [total - offset].
        in: query
        name: offset
        required: false
        type: integer
      - description: Objects limit, per default 20 objects will get returned
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Specify a MongoDB sort operation (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
          using JSON (For example: {"name": -1}).'
        in: query
        name: sort
        required: false
        type: string
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: Process log
          schema:
            $ref: '#/definitions/core.v3.Processes'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get process
      tags:
      - core.v3
  /api/v3/nodes/{node}/zip:
    get:
      description: Stream file contents.
      operationId: getCoreV3Zip
      parameters:
      - description: Node identifier
        in: path
        name: node
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      produces:
      - octet/stream
      responses:
        200:
          description: Content
          schema:
            type: file
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Download node content.
      tags:
      - core.v3
  /api/v3/nodes/trash:
    get:
      description: Return deleted nodes (Excluding sub nodes of deleted collections)
      operationId: getCoreV3DeletedNodes
      parameters:
      - description: 'Specify a MongoDB based resource query (https://docs.mongodb.com/manual/tutorial/query-documents)
          using JSON (For example: {"name": {$regex: ''foo.*''}}).'
        in: query
        name: query
        required: false
        type: string
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      - description: Objects offset, per default it starts from 0. You may also request
          a negative offset which will return results from the end [total - offset].
        in: query
        name: offset
        required: false
        type: integer
      - description: Objects limit, per default 20 objects will get returned
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Specify a MongoDB sort operation (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
          using JSON (For example: {"name": -1}).'
        in: query
        name: sort
        required: false
        type: string
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: Nodes
          schema:
            $ref: '#/definitions/core.v3.Nodes'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get deleted nodes
      tags:
      - core.v3
  /api/v3/notifications:
    get:
      operationId: getCoreV3Notifications
      parameters:
      - description: 'Specify a MongoDB based resource query (https://docs.mongodb.com/manual/tutorial/query-documents)
          using JSON (For example: {"name": {$regex: ''foo.*''}}).'
        in: query
        name: query
        required: false
        type: string
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      - description: Objects offset, per default it starts from 0. You may also request
          a negative offset which will return results from the end [total - offset].
        in: query
        name: offset
        required: false
        type: integer
      - description: Objects limit, per default 20 objects will get returned
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Specify a MongoDB sort operation (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
          using JSON (For example: {"name": -1}).'
        in: query
        name: sort
        required: false
        type: string
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: List of notifications
          schema:
            $ref: '#/definitions/notification.v3.Notifications'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get nofitifications
      tags:
      - notification.v3
    post:
      consumes:
      - application/json; charset=UTF-8
      operationId: addCoreV3Notification
      parameters:
      - in: body
        name: body
        schema:
          $ref: '#/definitions/notification.v3.Notification'
      produces:
      - application/json; charset=UTF-8
      responses:
        202:
          description: Notification
          schema:
            $ref: '#/definitions/notification.v3.Notification'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Send notification
      tags:
      - notification.v3
  /api/v3/notifications/{notification}:
    delete:
      operationId: deleteCoreV3Notification
      parameters:
      - description: Resource identifier
        in: path
        name: notification
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      produces:
      - application/json; charset=UTF-8
      responses:
        204:
          description: If successful the server will respond with 204 No Content
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Delete notification
      tags:
      - notification.v3
    get:
      operationId: getCoreV3Notification
      parameters:
      - description: Resource identifier
        in: path
        name: notification
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: Notification
          schema:
            $ref: '#/definitions/notification.v3.Notification'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get notification
      tags:
      - notification.v3
  /api/v3/notifications/broadcast:
    post:
      consumes:
      - application/json; charset=UTF-8
      operationId: sendCoreV3Broadcast
      parameters:
      - description: Notification
        in: body
        name: body
        schema:
          $ref: '#/definitions/notification.v3.Notification'
      produces:
      - application/json; charset=UTF-8
      responses:
        202:
          description: Notification
          schema:
            $ref: '#/definitions/notification.v3.Notification'
        403:
          description: Access denied
      summary: Send broadcast
      tags:
      - notification.v3
  /api/v3/notifications/mail:
    post:
      consumes:
      - application/json; charset=UTF-8
      operationId: sendCoreV3Mail
      parameters:
      - description: Mail
        in: body
        name: body
        schema:
          $ref: '#/definitions/notification.v3.Mail'
      responses:
        202:
          description: Mail
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Send mail
      tags:
      - notification.v3
  /api/v3/office/documents:
    post:
      consumes:
      - application/json; charset=UTF-8
      description: Create new document from an existing office document template
      operationId: addCoreV3Document
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/core.v3.File'
      produces:
      - application/json; charset=UTF-8
      responses:
        201:
          description: File
          schema:
            $ref: '#/definitions/core.v3.File'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Create new document
      tags:
      - wopi.v3
  /api/v3/processes:
    get:
      description: Async processes
      operationId: getCoreV3Processes
      parameters:
      - description: 'Specify a MongoDB based resource query (https://docs.mongodb.com/manual/tutorial/query-documents)
          using JSON (For example: {"name": {$regex: ''foo.*''}}).'
        in: query
        name: query
        required: false
        type: string
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      - description: Objects offset, per default it starts from 0. You may also request
          a negative offset which will return results from the end [total - offset].
        in: query
        name: offset
        required: false
        type: integer
      - description: Objects limit, per default 20 objects will get returned
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Specify a MongoDB sort operation (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
          using JSON (For example: {"name": -1}).'
        in: query
        name: sort
        required: false
        type: string
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: List of processes
          schema:
            $ref: '#/definitions/core.v3.Processes'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get processes
      tags:
      - core.v3
  /api/v3/processes/{process}:
    delete:
      operationId: deleteCoreV3Process
      parameters:
      - description: Resource identifier
        in: path
        name: process
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      produces:
      - application/json; charset=UTF-8
      responses:
        204:
          description: If successful the server will respond with 204 No Content
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Delete process
      tags:
      - core.v3
    get:
      operationId: getCoreV3Process
      parameters:
      - description: Resource identifier
        in: path
        name: process
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: Process
          schema:
            $ref: '#/definitions/core.v3.Process'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get process
      tags:
      - core.v3
  /api/v3/sessions:
    get:
      description: Upload sessions
      operationId: getCoreV3Sessions
      parameters:
      - description: 'Specify a MongoDB based resource query (https://docs.mongodb.com/manual/tutorial/query-documents)
          using JSON (For example: {"name": {$regex: ''foo.*''}}).'
        in: query
        name: query
        required: false
        type: string
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      - description: Objects offset, per default it starts from 0. You may also request
          a negative offset which will return results from the end [total - offset].
        in: query
        name: offset
        required: false
        type: integer
      - description: Objects limit, per default 20 objects will get returned
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Specify a MongoDB sort operation (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
          using JSON (For example: {"name": -1}).'
        in: query
        name: sort
        required: false
        type: string
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: List of sessions
          schema:
            $ref: '#/definitions/core.v3.Sessions'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get sessions
      tags:
      - core.v3
    post:
      operationId: addCoreV3Session
      parameters:
      - in: body
        name: data
        schema:
          $ref: '#/definitions/core.v3.Session'
      produces:
      - application/json; charset=UTF-8
      responses:
        201:
          description: If successful the server will respond with 201 Created
          schema:
            $ref: '#/definitions/core.v3.Session'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Add session
      tags:
      - core.v3
  /api/v3/sessions/{session}:
    delete:
      operationId: deleteCoreV3Session
      parameters:
      - description: Resource identifier
        in: path
        name: session
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      produces:
      - application/json; charset=UTF-8
      responses:
        204:
          description: If successful the server will respond with 204 No Content
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Delete session
      tags:
      - core.v3
    get:
      operationId: getCoreV3Session
      parameters:
      - description: Resource identifier
        in: path
        name: session
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: Session
          schema:
            $ref: '#/definitions/core.v3.Session'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get session
      tags:
      - core.v3
    patch:
      consumes:
      - application/json; charset=UTF-8-patch+json
      operationId: patchCoreV3Session
      parameters:
      - description: Resource identifier
        in: path
        name: session
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: Set attributes for session
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/JsonPatch'
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: Session
          schema:
            $ref: '#/definitions/core.v3.Session'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Change session
      tags:
      - core.v3
  /api/v3/users:
    get:
      operationId: getCoreV3Users
      parameters:
      - description: 'Specify a MongoDB based resource query (https://docs.mongodb.com/manual/tutorial/query-documents)
          using JSON (For example: {"name": {$regex: ''foo.*''}}).'
        in: query
        name: query
        required: false
        type: string
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      - description: Objects offset, per default it starts from 0. You may also request
          a negative offset which will return results from the end [total - offset].
        in: query
        name: offset
        required: false
        type: integer
      - description: Objects limit, per default 20 objects will get returned
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Specify a MongoDB sort operation (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
          using JSON (For example: {"name": -1}).'
        in: query
        name: sort
        required: false
        type: string
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: List of users
          schema:
            $ref: '#/definitions/core.v3.Users'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get users
      tags:
      - core.v3
    post:
      operationId: addCoreV3User
      parameters:
      - in: body
        name: data
        schema:
          $ref: '#/definitions/core.v3.User'
      produces:
      - application/json; charset=UTF-8
      responses:
        201:
          description: If successful the server will respond with 201 Created
          schema:
            $ref: '#/definitions/core.v3.User'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Add user
      tags:
      - core.v3
  /api/v3/users/{user}:
    delete:
      operationId: deleteCoreV3User
      parameters:
      - description: Resource identifier
        in: path
        name: user
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      produces:
      - application/json; charset=UTF-8
      responses:
        204:
          description: If successful the server will respond with 204 No Content
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Delete user
      tags:
      - core.v3
    get:
      operationId: getCoreV3User
      parameters:
      - description: Resource identifier
        in: path
        name: user
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: User
          schema:
            $ref: '#/definitions/core.v3.User'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get user
      tags:
      - core.v3
    patch:
      consumes:
      - application/json; charset=UTF-8-patch+json
      operationId: patchCoreV3User
      parameters:
      - description: Resource identifier
        in: path
        name: user
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: Set attributes for user
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/JsonPatch'
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: User
          schema:
            $ref: '#/definitions/core.v3.User'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Update user
      tags:
      - core.v3
  /api/v3/users/{user}/avatar:
    get:
      operationId: getCoreV3UserAvatar
      parameters:
      - description: Resource identifier
        in: path
        name: user
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      produces:
      - octet/stream
      responses:
        200:
          description: Binaray user avatar
          schema:
            $ref: '#/definitions/core.v3.User'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get user avatar
      tags:
      - core.v3
  /api/v3/users/{user}/groups:
    get:
      operationId: getCoreV3UserGroups
      parameters:
      - description: Resource identifier
        in: path
        name: user
        required: true
        type: string
        x-example: 5c46ee8a3fee73342c3e9c58
      - description: 'Specify a MongoDB based resource query (https://docs.mongodb.com/manual/tutorial/query-documents)
          using JSON (For example: {"name": {$regex: ''foo.*''}}).'
        in: query
        name: query
        required: false
        type: string
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      - description: Objects offset, per default it starts from 0. You may also request
          a negative offset which will return results from the end [total - offset].
        in: query
        name: offset
        required: false
        type: integer
      - description: Objects limit, per default 20 objects will get returned
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Specify a MongoDB sort operation (https://docs.mongodb.com/manual/reference/method/cursor.sort/)
          using JSON (For example: {"name": -1}).'
        in: query
        name: sort
        required: false
        type: string
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: List of groups
          schema:
            $ref: '#/definitions/core.v3.Groups'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get all groups of a user
      tags:
      - core.v3
  /api/v3/users/whoami:
    get:
      operationId: getCoreV3CurrentUser
      parameters:
      - description: Filter attributes
        in: query
        items:
          type: string
        name: attributes
        required: false
        type: array
      produces:
      - application/json; charset=UTF-8
      responses:
        200:
          description: User
          schema:
            $ref: '#/definitions/core.v3.User'
        400:
          $ref: '#/responses/core.v3.BadRequest'
        401:
          $ref: '#/responses/core.v3.Unauthorized'
        403:
          $ref: '#/responses/core.v3.Forbidden'
        404:
          $ref: '#/responses/core.v3.NotFound'
        422:
          $ref: '#/responses/UnprocessableEntity'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
      summary: Get current user
      tags:
      - core.v3
  /oidc:
    post:
      consumes:
      - application/x-www-form-urlencoded
      operationId: createOidcToken
      parameters:
      - description: OAUTH2 grant_type
        enum:
        - password
        - password_mfa
        - refresh_token
        in: formData
        name: grant_type
        required: true
        type: string
      - description: Username
        in: formData
        name: username
        required: false
        type: string
      - description: Password
        in: formData
        name: password
        required: false
        type: string
      - description: Multi factor value. This is usually some kind of a code.
        in: formData
        name: code
        required: false
        type: string
      - description: OAUTH2 refresh_token to retrieve a new access_token.
        in: formData
        name: refresh_token
        required: false
        type: string
      produces:
      - application/json
      responses:
        400:
          $ref: '#/responses/oidc.BadRequest'
        500:
          $ref: '#/responses/core.v3.InternalServerError'
        "200":
          description: Oauth2 token
          schema:
            $ref: '#/definitions/oidc.OAuth2Token'
      security:
      - BasicAuth: []
      summary: Get OAUTH2 Bearer token
      tags:
      - oidc
  /openapi/v2:
    get:
      operationId: getOpenApiV2
      produces:
      - application/json
      responses:
        200:
          description: openapi v2 (swagger) specs
      security: []
      summary: Get openapi v2 (swagger) specs
      tags:
      - openapi
  /openapi/v3:
    get:
      operationId: getOpenApiV3
      produces:
      - application/json
      responses:
        200:
          description: openapi v3 specs
      security: []
      summary: Get openapi v3 specs
      tags:
      - openapi
responses:
  UnprocessableEntity:
    description: Unprocessable Entity
    schema:
      $ref: '#/definitions/core.v3.Error'
  core.v3.BadRequest:
    description: Bad Reqeust
    schema:
      $ref: '#/definitions/core.v3.Error'
  core.v3.Conflict:
    description: Conflict
    schema:
      $ref: '#/definitions/core.v3.Error'
  core.v3.Forbidden:
    description: Forbidden
    schema:
      $ref: '#/definitions/core.v3.Error'
  core.v3.InternalServerError:
    description: Internal Server Error
    schema:
      $ref: '#/definitions/core.v3.Error'
  core.v3.NotFound:
    description: The specified resource was not found
    schema:
      $ref: '#/definitions/core.v3.Error'
  core.v3.Unauthorized:
    description: Unauthorized
    schema:
      $ref: '#/definitions/core.v3.Error'
  oidc.BadRequest:
    description: OAUTH2 compatible error response, see https://tools.ietf.org/html/rfc6749#section-5.2
    schema:
      properties:
        error:
          description: OAUTH2 error, see https://tools.ietf.org/html/rfc6749#section-5.2
          type: string
        error_description:
          description: Human-readable ASCII [USASCII] text providing additional information,
            used to assist the client developer in understanding the error that occurred.
          type: string
        error_uri:
          description: A URI identifying a human-readable web page with information
            about the error, used to provide the client developer with additional
            information about the error.
          type: string
      type: object
schemes:
- https
- http
security:
- BasicAuth: []
- BearerAuth: []
securityDefinitions:
  BasicAuth:
    type: basic
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
